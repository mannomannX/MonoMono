#!/bin/bash
# ==============================================================================
# MONOMONO-UPDATE v1.2 (Final & mit App-Auth)
# ==============================================================================
# Löst einen manuellen Sync aus, indem es sich sicher als GitHub App
# authentifiziert und einen repository_dispatch-Event sendet.
# ==============================================================================

auth_check() {
    if ! gh auth status >/dev/null 2>&1; then
        echo "⚠️  Du scheinst nicht bei der GitHub CLI angemeldet zu sein."
        read -p "? Soll 'gh auth login' jetzt ausgeführt werden? (j/n) " choice
        if [[ "$choice" =~ ^[YyJj]$ ]]; then gh auth login; else echo "❌ Abbruch."; exit 1; fi
    fi
    GITHUB_USER=$(gh api user --jq .login)
    echo "✔ Authentifiziert als '$GITHUB_USER'."
}

get_installation_token() {
    local config_file=$1; local gh_user=$2;
    APP_ID=$(jq -r '.app_id' "$config_file"); PRIVATE_KEY_PATH=$(jq -r '.private_key_path' "$config_file");
    if [ ! -f "$PRIVATE_KEY_PATH" ]; then echo "❌ Fehler: .pem-Datei nicht gefunden." >&2; exit 1; fi
    NOW=$(date +%s); IAT=$(($NOW - 60)); EXP=$(($NOW + 600));
    HEADER_B64=$(echo -n '{"alg":"RS256","typ":"JWT"}' | base64 | tr -d '\n=' | tr '/+' '_-');
    PAYLOAD_B64=$(echo -n "{\"iat\":$IAT,\"exp\":$EXP,\"iss\":\"$APP_ID\"}" | base64 | tr -d '\n=' | tr '/+' '_-');
    SIGNATURE_B64=$(openssl dgst -sha256 -sign "$PRIVATE_KEY_PATH" <(echo -n "$HEADER_B64.$PAYLOAD_B64") | base64 | tr -d '\n=' | tr '/+' '_-');
    JWT="$HEADER_B64.$PAYLOAD_B64.$SIGNATURE_B64";
    INSTALLATION_ID=$(curl -s -H "Authorization: Bearer $JWT" -H "Accept: application/vnd.github.v3+json" https://api.github.com/app/installations | jq ".[] | select(.account.login==\"$gh_user\") | .id");
    if [ -z "$INSTALLATION_ID" ]; then echo "❌ Fehler: App nicht installiert."; exit 1; fi;
    INSTALLATION_TOKEN=$(curl -s -X POST -H "Authorization: Bearer $JWT" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/app/installations/$INSTALLATION_ID/access_tokens" | jq -r '.token');
    if [ -z "$INSTALLATION_TOKEN" ] || [ "$INSTALLATION_TOKEN" == "null" ]; then echo "❌ Fehler beim Erstellen des Tokens."; exit 1; fi;
    export GENERATED_APP_TOKEN=$INSTALLATION_TOKEN;
}

# --- HAUPTLOGIK ---
auth_check
CONFIG_DIR="$HOME/.monomono"; CONFIG_FILE="$CONFIG_DIR/config.json"
if [ ! -f "$CONFIG_FILE" ]; then echo "❌ Fehler: Keine Konfiguration gefunden."; exit 1; fi

read -p "? Welches Fusions-Repo soll manuell synchronisiert werden? (user/repo): " FUSION_REPO
if [ -z "$FUSION_REPO" ]; then echo "❌ Abbruch: Kein Repo angegeben."; exit 1; fi

echo "-> Generiere sicheren App-Token für die Anfrage..."
get_installation_token "$CONFIG_FILE" "$GITHUB_USER"

echo "-> Sende Sync-Anfrage an '$FUSION_REPO'..."
GH_TOKEN=$GENERATED_APP_TOKEN gh api --method POST "repos/$FUSION_REPO/dispatches" \
    -f "event_type=monomono-sync-event" >/dev/null || { echo "❌ Fehler beim Senden des Sync-Events."; exit 1; }

echo "✅ Anfrage gesendet. Verfolge den Fortschritt hier: https://github.com/$FUSION_REPO/actions"