#!/bin/bash
# ==============================================================================
# MONOMONO-UPGRADE v1.0
# ==============================================================================
# Aktualisiert ein bestehendes Fusions-Repo und alle verbundenen Sub-Repos
# auf die neuesten Workflow-Versionen.
# ==============================================================================

# --- Konfiguration ---
CONFIG_DIR="$HOME/.monomono"
CONFIG_FILE="$CONFIG_DIR/config.json"
MONOMONO_DIR=$(dirname "$(dirname "$0")") # Ermittelt das Hauptverzeichnis von monomono

# --- Hilfsfunktionen ---
check_auth() {
    if ! gh auth status >/dev/null 2>&1; then
        echo "❌ Fehler: Du bist nicht bei der GitHub CLI angemeldet. Bitte 'gh auth login' ausführen." >&2
        exit 1
    fi
    GITHUB_USER=$(gh api user --jq .login)
    echo "✔ Authentifiziert als '$GITHUB_USER'."
}

# --- HAUPTLOGIK ---
check_auth

# 1. Ziel-Repo abfragen
read -p "? Welches Fusions-Repo soll aktualisiert werden? (Format: user/repo): " FUSION_REPO
if [ -z "$FUSION_REPO" ]; then echo "❌ Abbruch: Kein Repo angegeben."; exit 1; fi

echo "-> Lese die aktuelle Konfiguration aus '$FUSION_REPO'..."

# 2. Workflow auslesen und Sub-Repos extrahieren
WORKFLOW_CONTENT=$(gh api "repos/$FUSION_REPO/contents/.github/workflows/sync.yml" --jq .content -t | base64 --decode)
if [ -z "$WORKFLOW_CONTENT" ]; then
    echo "❌ Fehler: Konnte 'sync.yml' im Repo '$FUSION_REPO' nicht finden oder lesen." >&2
    exit 1
fi

SUB_REPOS=$(echo "$WORKFLOW_CONTENT" | grep -oP "for repo in \\\$\(echo '([^']*)'" | head -n1 | sed -E "s/for repo in \\\$\(echo '([^']*)'/\1/")

if [ -z "$SUB_REPOS" ]; then
    echo "❌ Fehler: Konnte die Liste der Sub-Repos aus dem Workflow nicht extrahieren." >&2
    exit 1
fi

echo "✔ Folgende Sub-Repos gefunden: $SUB_REPOS"

# 3. Bestätigung des Benutzers
read -p "? Fortfahren und die Workflows in '$FUSION_REPO' und allen Sub-Repos aktualisieren? (j/n) " choice
if [[ ! "$choice" =~ ^[YyJj]$ ]]; then echo "❌ Abbruch durch Benutzer."; exit 1; fi

# 4. Neueste Workflow-Versionen definieren (HIER WIRD DIE ZUKUNFT DEFINIERT)
# Dies sind die Vorlagen, die ausgerollt werden.
# Wenn wir die Projekt-Map einbauen, ändern wir nur diesen Text hier.
source "$MONOMONO_DIR/lib/workflow_templates.sh"
get_sync_workflow_template "$SUB_REPOS" # Holt $SYNC_WORKFLOW_TEMPLATE
get_trigger_workflow_template           # Holt $TRIGGER_WORKFLOW_TEMPLATE

# 5. Workflows aktualisieren
echo "-> Aktualisiere Haupt-Workflow in '$FUSION_REPO'..."
gh api --method PUT "repos/$FUSION_REPO/contents/.github/workflows/sync.yml" \
   -f message="build: Upgrade monomono sync workflow" \
   -f content="$(echo -n "$SYNC_WORKFLOW_TEMPLATE" | base64)" \
   -f sha="$(gh api "repos/$FUSION_REPO/contents/.github/workflows/sync.yml" --jq .sha -t)" >/dev/null

echo "-> Aktualisiere Trigger-Workflows in Sub-Repos..."
for repo in $(echo "$SUB_REPOS" | sed "s/,/ /g"); do
    echo "   - Verarbeite $repo..."
    SHA=$(gh api "repos/$repo/contents/.github/workflows/monomono-trigger.yml" --jq .sha -t 2>/dev/null)
    if [ -n "$SHA" ]; then
        # Workflow existiert, wir aktualisieren ihn
        gh api --method PUT "repos/$repo/contents/.github/workflows/monomono-trigger.yml" \
           -f message="build: Upgrade monomono trigger workflow" \
           -f content="$(echo -n "$TRIGGER_WORKFLOW_TEMPLATE" | base64)" \
           -f sha="$SHA" >/dev/null
    else
        # Workflow existiert nicht, wir erstellen ihn
        gh api --method PUT "repos/$repo/contents/.github/workflows/monomono-trigger.yml" \
           -f message="feat: Add monomono trigger workflow" \
           -f content="$(echo -n "$TRIGGER_WORKFLOW_TEMPLATE" | base64)" >/dev/null
    fi
done

echo ""
echo "✅ Alle Workflows erfolgreich auf die neueste Version aktualisiert!"