#!/bin/bash
# ==============================================================================
# MONOMONO-UPGRADE v1.4 (Final & Complete)
# ==============================================================================
# Aktualisiert ein Fusions-Repo und alle Sub-Repos. Wenn der Haupt-Workflow
# fehlt, wird er im Repair-Modus von Grund auf neu erstellt.
# ==============================================================================

auth_check() {
    if ! gh auth status >/dev/null 2>&1; then
        echo "‚ö†Ô∏è  Du scheinst nicht bei der GitHub CLI angemeldet zu sein."
        read -p "? Soll 'gh auth login' jetzt ausgef√ºhrt werden? (j/n) " choice
        if [[ "$choice" =~ ^[YyJj]$ ]]; then gh auth login; else echo "‚ùå Abbruch."; exit 1; fi
    fi
    GITHUB_USER=$(gh api user --jq .login)
    echo "‚úî Authentifiziert als '$GITHUB_USER'."
}

# --- HAUPTLOGIK ---
auth_check

# 1. Ziel-Repo abfragen
read -p "? Welches Fusions-Repo soll repariert/aktualisiert werden? (user/repo): " FUSION_REPO
if [ -z "$FUSION_REPO" ]; then echo "‚ùå Abbruch: Kein Repo angegeben."; exit 1; fi

# 2. PAT f√ºr alle API-Operationen abfragen
echo "--------------------------------------------------------------------"
echo "üîë INFO: Ein pers√∂nlicher Zugriffstoken (PAT) mit 'repo' & 'workflow' Scopes wird ben√∂tigt."
echo "--------------------------------------------------------------------"
PAT=""
while [ -z "$PAT" ]; do
    read -s -p "üëâ Bitte f√ºge den kopierten Token hier ein: " PAT; echo
done

# 3. Workflow auslesen (mit Repair-Modus)
echo "-> Lese die aktuelle Konfiguration aus '$FUSION_REPO'..."
WORKFLOW_RESPONSE=$(GH_TOKEN=$PAT gh api "repos/$FUSION_REPO/contents/.github/workflows/sync.yml" 2>/dev/null)
IS_UPDATE=false
SUB_REPOS=""

if echo "$WORKFLOW_RESPONSE" | jq -e '.sha' > /dev/null; then
    IS_UPDATE=true
    echo "‚úî Konfiguration gefunden. Extrahiere verbundene Repos..."
    WORKFLOW_SHA=$(echo "$WORKFLOW_RESPONSE" | jq -r .sha)
    WORKFLOW_CONTENT=$(echo "$WORKFLOW_RESPONSE" | jq -r .content | base64 --decode)
    SUB_REPOS=$(echo "$WORKFLOW_CONTENT" | grep -oP "REPOS_TO_SYNC='([^']*)'" | sed -E "s/REPOS_TO_SYNC='([^']*)'/\1/")
else
    echo "‚ö†Ô∏è  Warnung: 'sync.yml' nicht gefunden. Wechsle in den Repair-Modus."
    read -p "? Bitte gib die Sub-Repos ein, die verbunden sein sollen (user/repo1,...): " SUB_REPOS
fi

if [ -z "$SUB_REPOS" ]; then echo "‚ùå Abbruch: Keine Sub-Repos angegeben."; exit 1; fi
echo "‚úî Folgende Repos werden im Workflow konfiguriert: $SUB_REPOS"

# 4. Neueste Workflow-Vorlagen definieren
read -r -d '' SYNC_WORKFLOW_TEMPLATE << EOM
name: 'Fusion-Repo Sync'
on:
  workflow_dispatch:
  repository_dispatch:
    types: [monomono-sync-event]
jobs:
  sync-repos:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout fusion repo
        uses: actions/checkout@v4
        with:
          token: \${{ secrets.ACCESS_TOKEN }}
      - name: Sync and Rebuild
        run: |
          REPOS_TO_SYNC='${SUB_REPOS}'
          echo "-> Searching for obsolete directories to remove..."
          ALL_DIRS=\$(find . -maxdepth 1 -mindepth 1 -type d ! -name '.git' -exec basename {} \;)
          for dir in \$ALL_DIRS; do
              if ! echo "\$REPOS_TO_SYNC" | grep -q "\$dir"; then
                  echo "   - Deleting obsolete directory: \$dir"
                  rm -rf "\$dir"
              fi
          done
          git config --global url."https://x-access-token:\${{ secrets.ACCESS_TOKEN }}@github.com/".insteadOf "https://github.com/"
          for repo in \$(echo "\$REPOS_TO_SYNC" | sed 's/,/ /g'); do
            folder_name=\$(basename \$repo)
            echo "-> Cloning \$repo into \$folder_name..."
            rm -rf "\$folder_name"
            git clone --depth 1 https://github.com/\$repo.git "\$folder_name" && rm -rf "\$folder_name/.git"
          done
          sudo apt-get update -qq && sudo apt-get install -y tree >/dev/null
          echo "# ü§ñ MonoMono Fusions-Repo" > README.md
          echo "### üß© Komponenten" >> README.md
          for repo in \$(echo "\$REPOS_TO_SYNC" | sed 's/,/ /g'); do
            echo "- **[\$(basename \$repo)](./\$(basename \$repo))** (Original: [\$repo](https://github.com/\$repo))" >> README.md
          done
          echo "### üå≥ Verzeichnisstruktur" >> README.md
          echo "\`\`\`" >> README.md
          tree -L 2 -I 'README.md' >> README.md
          echo "\`\`\`" >> README.md
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          if ! git diff-index --quiet HEAD; then
            git commit -m "feat: Sync sub-repos and update project map"
            git push --force
          else
            echo "No new changes found."
          fi
EOM

read -r -d '' TRIGGER_WORKFLOW_TEMPLATE << EOM
name: MonoMono Sync Trigger
on:
  push:
    branches: [main, master]
jobs:
  dispatch:
    runs-on: ubuntu-latest
    steps:
      - name: Send dispatch to fusion repo
        env:
          FUSION_REPO: \${{ secrets.MONOMONO_FUSION_REPO }}
          GH_TOKEN: \${{ secrets.MONOMONO_APP_TOKEN }}
        run: |
          if [ -z "\$FUSION_REPO" ] || [ -z "\$GH_TOKEN" ]; then echo "Fehler: Secrets nicht gesetzt."; exit 1; fi
          gh api --method POST "repos/\$FUSION_REPO/dispatches" -f "event_type=monomono-sync-event"
EOM

# 5. Haupt-Workflow erstellen oder aktualisieren
if [ "$IS_UPDATE" = true ]; then
    echo "-> Aktualisiere Haupt-Workflow in '$FUSION_REPO'..."
    GH_TOKEN=$PAT gh api --method PUT "repos/$FUSION_REPO/contents/.github/workflows/sync.yml" \
       -f message="build: Upgrade monomono sync workflow" \
       -f content="$(echo -n "$SYNC_WORKFLOW_TEMPLATE" | base64)" \
       -f sha="$WORKFLOW_SHA" >/dev/null
else
    echo "-> Erstelle neuen Haupt-Workflow in '$FUSION_REPO'..."
    GH_TOKEN=$PAT gh api --method PUT "repos/$FUSION_REPO/contents/.github/workflows/sync.yml" \
       -f message="build: Create/Repair monomono sync workflow" \
       -f content="$(echo -n "$SYNC_WORKFLOW_TEMPLATE" | base64)" >/dev/null
fi
echo "‚úî Haupt-Workflow erfolgreich (neu) erstellt/aktualisiert."

# 6. Trigger-Workflows in allen Sub-Repos aktualisieren (DER FEHLENDE TEIL)
echo "-> Aktualisiere Trigger-Workflows in allen Sub-Repos..."
for repo in $(echo "$SUB_REPOS" | sed "s/,/ /g"); do
    echo "   - Verarbeite $repo..."
    SHA_TRIGGER=$(GH_TOKEN=$PAT gh api "repos/$repo/contents/.github/workflows/monomono-trigger.yml" --jq .sha 2>/dev/null)
    if [ -n "$SHA_TRIGGER" ]; then
        GH_TOKEN=$PAT gh api --method PUT "repos/$repo/contents/.github/workflows/monomono-trigger.yml" \
           -f message="build: Upgrade monomono trigger workflow" \
           -f content="$(echo -n "$TRIGGER_WORKFLOW_TEMPLATE" | base64)" \
           -f sha="$SHA_TRIGGER" >/dev/null
    else
        GH_TOKEN=$PAT gh api --method PUT "repos/$repo/contents/.github/workflows/monomono-trigger.yml" \
           -f message="feat: Add/Repair monomono trigger workflow" \
           -f content="$(echo -n "$TRIGGER_WORKFLOW_TEMPLATE" | base64)" >/dev/null
    fi
done
echo "‚úî Trigger-Workflows erfolgreich aktualisiert."

# 7. Finalen Sync-Lauf ansto√üen
echo "-> Sto√üe einen Sync-Lauf an, um den Zustand zu bereinigen..."
gh workflow run sync.yml --repo "$FUSION_REPO"
echo "‚úÖ Prozess abgeschlossen. Der Aufr√§um-Prozess wurde gestartet."