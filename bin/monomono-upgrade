#!/bin/bash
# ==============================================================================
# MonoMono Upgrade-Skript v2.0 (Repair Tool)
# ==============================================================================
# Repariert einen fehlerhaften Workflow in einem bestehenden Fusions-Repo,
# indem er ihn mit der neuesten, robustesten Version √ºberschreibt.
# ==============================================================================
CONFIG_FILE="$HOME/.monomono_config"

# --- Funktion zur PAT-Abfrage ---
ensure_pat() {
    if [ -f "$CONFIG_FILE" ]; then source "$CONFIG_FILE"; fi
    if [ -z "$MONOMONO_PAT" ]; then
        echo "üîë INFO: Ein pers√∂nlicher Zugriffstoken (PAT) wird f√ºr die Authentifizierung ben√∂tigt."
        read -s -p "üëâ Bitte f√ºge einen g√ºltigen Token mit 'repo' und 'workflow' Rechten hier ein: " PAT; echo
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token $PAT" https://api.github.com/user)
        if [ "$HTTP_STATUS" -ne 200 ]; then echo "‚ùå FEHLER: Der Token ist ung√ºltig (HTTP-Status: $HTTP_STATUS)." >&2; exit 1; fi
        echo "MONOMONO_PAT='$PAT'" >> "$CONFIG_FILE"
        MONOMONO_PAT=$PAT
    fi
    export GH_TOKEN=$MONOMONO_PAT
    echo "‚úî Authentifizierung f√ºr diese Sitzung gesetzt."
}

# --- HAUPTLOGIK ---
echo "MonoMono Workflow Repair-Assistent"
echo "-----------------------------------"
read -p "? Welches Fusions-Repo soll repariert werden? (user/repo): " FUSION_REPO
if [ -z "$FUSION_REPO" ]; then echo "‚ùå Fehler: Eingabe darf nicht leer sein."; exit 1; fi

ensure_pat
GITHUB_USER=$(curl -s -H "Authorization: token $MONOMONO_PAT" https://api.github.com/user | jq -r '.login')

# Wir fragen den User, welche Sub-Repos verbunden sind, da wir der alten Datei nicht trauen k√∂nnen.
echo "-> Lade verf√ºgbare Repositories f√ºr die Auswahl..."
REPOS_LIST=$(curl -s -H "Authorization: token $MONOMONO_PAT" "https://api.github.com/user/repos?type=owner&per_page=100" | jq -r '.[].full_name')
echo -e "? Welche Sub-Repos sind mit '$FUSION_REPO' verbunden?"
SELECTED_REPOS=$(echo "$REPOS_LIST" | fzf --multi --height 40% --border --prompt="Select> ")
if [ -z "$SELECTED_REPOS" ]; then echo "‚ùå Aborted: No repositories selected."; exit 1; fi
SUB_REPOS=$(echo "$SELECTED_REPOS" | tr '\n' ',' | sed 's/,$//')

echo "‚úî Konfiguration f√ºr die Reparatur geladen."

# --- Generiere den neuen, korrekten Workflow-Inhalt ---
WORKFLOW_NAME="Fusion-Repo Erstellen & Aktualisieren"
# Wir erstellen einen minimalen Trigger-Satz. Der User kann 'connect' erneut laufen lassen, um mehr hinzuzuf√ºgen.
ON_TRIGGERS="on:\n  workflow_dispatch:"

read -r -d '' NEW_WORKFLOW_CONTENT << EOM
name: '$WORKFLOW_NAME'
$ON_TRIGGERS
jobs:
  sync-repos:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout fusion repo
        uses: actions/checkout@v4
        with:
          token: \${{ secrets.ACCESS_TOKEN }}
      - name: Clone sub-repos
        run: |
          git config --global url."https://x-access-token:\${{ secrets.ACCESS_TOKEN }}@github.com/".insteadOf "https://github.com/"
          REPOS_TO_SYNC=\${{ inputs.repos || '$SUB_REPOS' }}
          for repo in \$(echo "\$REPOS_TO_SYNC" | sed 's/,/ /g'); do
            folder_name=\$(basename \$repo)
            echo "-> Cloning \$repo into \$folder_name..."
            rm -rf "\$folder_name"
            git clone --depth 1 https://github.com/\$repo.git "\$folder_name" && rm -rf "\$folder_name/.git"
          done
      - name: Create intelligent README
        run: |
          sudo apt-get update >/dev/null && sudo apt-get install -y tree >/dev/null
          echo "# ü§ñ MonoMono Fusions-Repo" > README.md
          echo "" >> README.md
          echo "Dieses Repository ist eine automatisch generierte Zusammenf√ºhrung." >> README.md
          echo "" >> README.md
          echo "## üó∫Ô∏è Projekt-Map" >> README.md
          echo "### üß© Projekt-Komponenten" >> README.md
          for repo in \$(echo "\${{ inputs.repos || '$SUB_REPOS' }}" | sed 's/,/ /g'); do
            echo "- **[\$(basename \$repo)](./\$(basename \$repo))** (Original: [\$repo](https://github.com/\$repo))" >> README.md
          done
          echo "" >> README.md
          echo "### üå≥ Verzeichnisstruktur" >> README.md
          echo "\`\`\`" >> README.md
          tree -L 2 -I 'README.md' >> README.md
          echo "\`\`\`" >> README.md
          echo "" >> README.md
          echo "> Letzte Aktualisierung: \$(date)" >> README.md
      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          if ! git diff-index --quiet HEAD; then
            git commit -m "feat(workflow): Repair and upgrade MonoMono sync logic"
            git push
          else
            echo "No changes to workflow found."
          fi
EOM

# --- Pushe den neuen Workflow in das Repo ---
echo "-> √úberschreibe den fehlerhaften Workflow in '$FUSION_REPO'..."
TEMP_DIR=$(mktemp -d)
git clone "https://x-access-token:$MONOMONO_PAT@github.com/$FUSION_REPO.git" "$TEMP_DIR" >/dev/null 2>&1 || { echo "‚ùå Fehler beim Klonen des Repos."; rm -rf "$TEMP_DIR"; exit 1; }
mkdir -p "$TEMP_DIR/.github/workflows"
echo -e "$NEW_WORKFLOW_CONTENT" > "$TEMP_DIR/.github/workflows/sync.yml"
cd "$TEMP_DIR" || exit
git add .github/workflows/sync.yml
if ! git diff-index --quiet HEAD; then
    git commit -m "fix(workflow): Repair and upgrade MonoMono sync logic"
    git push
else
    echo "‚úî Workflow ist bereits auf dem neuesten Stand."
fi
cd - >/dev/null
rm -rf "$TEMP_DIR"

echo "‚úÖ Workflow f√ºr '$FUSION_REPO' erfolgreich repariert!"
echo "   F√ºhre 'monomono-update $FUSION_REPO' aus, um einen neuen Sync-Lauf zu starten."