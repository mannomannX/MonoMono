#!/bin/bash
# ==============================================================================
# MONOMONO-UPGRADE v1.3 (Final & Consistent Auth)
# ==============================================================================
# Aktualisiert ein bestehendes Fusions-Repo und alle verbundenen Sub-Repos
# auf die neuesten Workflow-Versionen. Nutzt expliziten PAT f√ºr alle API-Ops.
# ==============================================================================

auth_check() {
    if ! gh auth status >/dev/null 2>&1; then
        echo "‚ö†Ô∏è  Du scheinst nicht bei der GitHub CLI angemeldet zu sein."
        read -p "? Soll 'gh auth login' jetzt ausgef√ºhrt werden? (j/n) " choice
        if [[ "$choice" =~ ^[YyJj]$ ]]; then gh auth login; else echo "‚ùå Abbruch."; exit 1; fi
    fi
    GITHUB_USER=$(gh api user --jq .login)
    echo "‚úî Authentifiziert als '$GITHUB_USER'."
}

# --- HAUPTLOGIK ---
auth_check

# 1. Ziel-Repo abfragen
read -p "? Welches Fusions-Repo soll aktualisiert werden? (Format: user/repo): " FUSION_REPO
if [ -z "$FUSION_REPO" ]; then echo "‚ùå Abbruch: Kein Repo angegeben."; exit 1; fi

# 2. PAT f√ºr alle API-Operationen abfragen (wie im connect-Skript)
echo "--------------------------------------------------------------------"
echo "üîë INFO: Ein pers√∂nlicher Zugriffstoken (PAT) wird ben√∂tigt."
echo "‚ÄºÔ∏è  WICHTIG: Der Token braucht die Scopes 'repo' UND 'workflow'."
echo "   URL: https://github.com/settings/tokens/new"
echo "--------------------------------------------------------------------"
PAT=""
while [ -z "$PAT" ]; do
    read -s -p "üëâ Bitte f√ºge den kopierten Token hier ein und dr√ºcke ENTER: " PAT; echo
done
SCOPES=$(curl -s -H "Authorization: token $PAT" https://api.github.com/ -I | grep -i x-oauth-scopes | sed 's/x-oauth-scopes: //g' | tr -d '\r')
if ! [[ "$SCOPES" == *"repo"* && "$SCOPES" == *"workflow"* ]]; then
    echo "‚ùå FEHLER: Der Token hat nicht die erforderlichen Scopes 'repo' und 'workflow'." >&2
    exit 1
fi
echo "‚úî Access Token ist g√ºltig und hat die korrekten Berechtigungen."

# 3. Workflow auslesen (mit explizitem PAT)
echo "-> Lese die aktuelle Konfiguration aus '$FUSION_REPO'..."
WORKFLOW_RESPONSE=$(GH_TOKEN=$PAT gh api "repos/$FUSION_REPO/contents/.github/workflows/sync.yml" 2>/dev/null)

if ! echo "$WORKFLOW_RESPONSE" | jq -e '.sha' > /dev/null; then
    echo "‚ùå Fehler: Konnte 'sync.yml' im Repo '$FUSION_REPO' nicht lesen." >&2
    echo "   Stelle sicher, dass der Repo-Name korrekt ist und dein PAT die 'repo'-Rechte hat." >&2
    exit 1
fi

WORKFLOW_CONTENT=$(echo "$WORKFLOW_RESPONSE" | jq -r .content | base64 --decode)
WORKFLOW_SHA=$(echo "$WORKFLOW_RESPONSE" | jq -r .sha)

SUB_REPOS=$(echo "$WORKFLOW_CONTENT" | grep -oP "for repo in \\\$\(echo '([^']*)'" | head -n1 | sed -E "s/for repo in \\\$\(echo '([^']*)'/\1/")
if [ -z "$SUB_REPOS" ]; then
    echo "‚ùå Fehler: Konnte die Liste der Sub-Repos nicht extrahieren." >&2
    exit 1
fi
echo "‚úî Folgende Sub-Repos gefunden: $SUB_REPOS"

# 4. Best√§tigung des Benutzers
read -p "? Fortfahren und die Workflows aktualisieren? (j/n) " choice
if [[ ! "$choice" =~ ^[YyJj]$ ]]; then echo "‚ùå Abbruch durch Benutzer."; exit 1; fi

# 5. Neueste Workflow-Vorlagen definieren
# (Hier die Heredocs f√ºr SYNC_WORKFLOW_TEMPLATE und TRIGGER_WORKFLOW_TEMPLATE einf√ºgen, genau wie in der letzten Version)
read -r -d '' SYNC_WORKFLOW_TEMPLATE << EOM
name: 'Fusion-Repo Sync'
on:
  workflow_dispatch:
  repository_dispatch:
    types: [monomono-sync-event]
jobs:
  sync-repos:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout fusion repo
        uses: actions/checkout@v4
        with:
          token: \${{ secrets.ACCESS_TOKEN }}
      - name: Clone sub-repos
        run: |
          git config --global url."https://x-access-token:\${{ secrets.ACCESS_TOKEN }}@github.com/".insteadOf "https://github.com/"
          for repo in \$(echo '${SUB_REPOS}' | sed 's/,/ /g'); do
            folder_name=\$(basename \$repo)
            echo "-> Cloning \$repo into \$folder_name..."
            rm -rf "\$folder_name"
            git clone --depth 1 https://github.com/\$repo.git "\$folder_name" && rm -rf "\$folder_name/.git"
          done
      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          if ! git diff-index --quiet HEAD; then
            git commit -m "feat: Sync sub-repos"
            git push
          else
            echo "No new changes found."
          fi
EOM

read -r -d '' TRIGGER_WORKFLOW_TEMPLATE << EOM
name: MonoMono Sync Trigger
on:
  push:
    branches: [main, master]
jobs:
  dispatch:
    runs-on: ubuntu-latest
    steps:
      - name: Send dispatch to fusion repo
        env:
          FUSION_REPO: \${{ secrets.MONOMONO_FUSION_REPO }}
          GH_TOKEN: \${{ secrets.MONOMONO_APP_TOKEN }}
        run: |
          if [ -z "\$FUSION_REPO" ] || [ -z "\$GH_TOKEN" ]; then echo "Fehler: Secrets nicht gesetzt."; exit 1; fi
          gh api --method POST "repos/\$FUSION_REPO/dispatches" -f "event_type=monomono-sync-event"
EOM


# 6. Workflows aktualisieren (mit explizitem PAT)
echo "-> Aktualisiere Haupt-Workflow in '$FUSION_REPO'..."
GH_TOKEN=$PAT gh api --method PUT "repos/$FUSION_REPO/contents/.github/workflows/sync.yml" \
   -f message="build: Upgrade monomono sync workflow" \
   -f content="$(echo -n "$SYNC_WORKFLOW_TEMPLATE" | base64)" \
   -f sha="$WORKFLOW_SHA" >/dev/null

for repo in $(echo "$SUB_REPOS" | sed "s/,/ /g"); do
    echo "   - Verarbeite $repo..."
    SHA_TRIGGER=$(GH_TOKEN=$PAT gh api "repos/$repo/contents/.github/workflows/monomono-trigger.yml" --jq .sha 2>/dev/null)
    if [ -n "$SHA_TRIGGER" ]; then
        GH_TOKEN=$PAT gh api --method PUT "repos/$repo/contents/.github/workflows/monomono-trigger.yml" \
           -f message="build: Upgrade monomono trigger workflow" \
           -f content="$(echo -n "$TRIGGER_WORKFLOW_TEMPLATE" | base64)" \
           -f sha="$SHA_TRIGGER" >/dev/null
    else
        GH_TOKEN=$PAT gh api --method PUT "repos/$repo/contents/.github/workflows/monomono-trigger.yml" \
           -f message="feat: Add monomono trigger workflow" \
           -f content="$(echo -n "$TRIGGER_WORKFLOW_TEMPLATE" | base64)" >/dev/null
    fi
done

echo ""
echo "‚úÖ Alle Workflows erfolgreich auf die neueste Version aktualisiert!"