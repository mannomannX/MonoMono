#!/bin/bash
# ==============================================================================
# MONOMONO - HAUPTSKRIPT (v5.5 - Finaler Auth-Fix)
# ==============================================================================
# Dieses Skript erstellt ein "Fusions-Repo" aus mehreren GitHub-Repositories.
# Es f√ºhrt ein robustes, einmaliges Setup f√ºr seine Abh√§ngigkeiten durch und
# bietet detaillierte Anleitungen, um eine reibungslose Benutzererfahrung
# zu gew√§hrleisten.
# ==============================================================================

# --- Konfiguration & Befehlslogik ---
CONFIG_FILE="$HOME/.fusion_assistant_config"

# Verarbeite Befehle wie --help oder --reset und beende das Skript danach
case "$1" in
    --help|-h)
        echo "MonoMono Assistent - Ein Werkzeug zum Erstellen von Fusions-Repos."
        echo
        echo "Verwendung:"
        echo "  monomono           - Startet den interaktiven Assistenten."
        echo "  monomono --reset   - L√∂scht den gespeicherten GitHub-Benutzernamen."
        echo "  monomono --help    - Zeigt diese Hilfe an."
        exit 0
        ;;
    --reset)
        if [ -f "$CONFIG_FILE" ]; then
            rm "$CONFIG_FILE"
            echo "‚úî Gespeicherter Benutzername wurde zur√ºckgesetzt."
        else
            echo "‚Ñπ Es war kein Benutzername zum Zur√ºcksetzen gespeichert."
        fi
        exit 0
        ;;
esac


# Lade Sprach- und Hilfsdateien, falls vorhanden
if [ -f "$(dirname "$0")/../lib/i18n.sh" ]; then
    source "$(dirname "$0")/../lib/i18n.sh"
    setup_language
else
    # Fallback-Texte auf Englisch, falls i18n.sh nicht gefunden wird
    TEXT_PROMPT_USERNAME="? Please enter your GitHub username: "
    TEXT_PROMPT_FUSION_NAME="? What should the new fusion repo be named? "
    TEXT_PROMPT_SCHEDULE="? Do you want to enable an automatic, scheduled sync? (y/n) "
    TEXT_PROMPT_SCHEDULE_HOURS="? At what interval (in hours) should the sync run? (1-24) "
    TEXT_PROMPT_WEBHOOKS="? Set up webhooks for real-time updates? (y/n) "
    TEXT_ALL_DONE="‚úÖ All done! Your fusion repo is now being populated."
fi


# Hilfsfunktion, um eine URL im Standardbrowser zu √∂ffnen.
open_url() {
  local url=$1
  case "$(uname -s)" in
    Linux*)   xdg-open "$url" >/dev/null 2>&1 ;;
    Darwin*)  open "$url" ;;
    CYGWIN*|MINGW*|MSYS*) # Git Bash on Windows
              start "" "$url" ;;
    *)        echo "Could not open browser automatically."
              echo "Please open this URL manually: $url" ;;
  esac
}


# --- HAUPTLOGIK ---

# 1. PR√úFUNG DER VORAUSSETZUNGEN
if ! command -v gh &>/dev/null || ! command -v fzf &>/dev/null; then
    # --- SETUP-MODUS ---
    echo "üîé Checking system requirements..."
    echo "--------------------------------------------------------------------"
    echo "‚ö†Ô∏è  One or more required tools are not available."
    echo "   Starting the one-time installation wizard..."
    echo "--------------------------------------------------------------------"
    
    OS_TYPE="$(uname -s)"
    
    read -p "? Required tools are missing. Install them now? (y/n) " choice
    if [[ ! "$choice" =~ ^[YyJj]$ ]]; then echo "‚ùå Aborted by user."; exit 1; fi

    case "$OS_TYPE" in
        Linux*)
            if command -v apt-get &>/dev/null; then
                echo "-> Updating package lists (apt-get update)..."
                sudo apt-get update
                if ! command -v gh &>/dev/null; then
                    echo "-> Installing 'GitHub CLI' (gh)..."
                    sudo apt-get install -y gh
                fi
                if ! command -v fzf &>/dev/null; then
                    echo "-> Installing 'fzf'..."
                    sudo apt-get install -y fzf
                fi
            elif command -v dnf &>/dev/null; then
                if ! command -v gh &>/dev/null; then sudo dnf install -y gh; fi
                if ! command -v fzf &>/dev/null; then sudo dnf install -y fzf; fi
            else
                echo "‚ùå Error: Could not find a suitable Linux package manager (apt, dnf)." >&2
                exit 1
            fi
            ;;
        Darwin*) # macOS
            if ! command -v brew &>/dev/null; then echo "‚ùå Error: Homebrew (brew) not found."; exit 1; fi
            if ! command -v gh &>/dev/null; then brew install gh; fi
            if ! command -v fzf &>/dev/null; then brew install fzf; fi
            ;;
        CYGWIN*|MINGW*|MSYS*) # Windows
            if ! command -v winget &>/dev/null; then echo "‚ùå Error: winget not found."; exit 1; fi
            if ! command -v gh &>/dev/null; then winget install --id GitHub.cli -e --accept-source-agreements; fi
            if ! command -v fzf &>/dev/null; then winget install --id junegunn.fzf -e --accept-source-agreements; fi
            ;;
        *)
            echo "‚ùå Error: Unsupported operating system ($OS_TYPE)." >&2
            exit 1
            ;;
    esac

    echo
    echo "--------------------------------------------------------------------"
    echo "‚úÖ SETUP COMPLETE."
    echo "‚ÄºÔ∏è  IMPORTANT: Please close this terminal and open a new one for the changes to take effect."
    echo "   If issues persist, please restart your computer."
    echo "--------------------------------------------------------------------"
    exit 0
fi

# --- ARBEITS-MODUS ---
echo "‚úî System ready. All tools found."

# 2. GITHUB-LOGIN & RECHTE-PR√úFUNG
NEEDS_REAUTH=false
if ! gh auth status &>/dev/null; then
    NEEDS_REAUTH=true
    echo "‚ÑπÔ∏è INFO: GITHUB LOGIN REQUIRED"
else
    TOKEN_STATUS=$(gh auth status -t 2>&1)
    if ! echo "$TOKEN_STATUS" | grep -q "repo" || ! echo "$TOKEN_STATUS" | grep -q "workflow"; then
        NEEDS_REAUTH=true
        echo "‚ö†Ô∏è  WARNUNG: Deinem aktuellen GitHub-Login fehlen die ben√∂tigten Rechte (repo, workflow)."
    fi
fi

if $NEEDS_REAUTH; then
    echo "--------------------------------------------------------------------"
    echo "   Um fortzufahren, ist eine erneute Anmeldung mit erweiterten Rechten erforderlich."
    read -p "? Dr√ºcke ENTER, um den Anmelde-Prozess zu starten..."
    
    # Leere die GITHUB_TOKEN Variable, um einen echten Browser-Login zu erzwingen
    unset GITHUB_TOKEN
    gh auth login --scopes repo,workflow
fi

if ! gh auth status &>/dev/null; then echo "‚ùå Login fehlgeschlagen."; exit 1; fi
echo "‚úî Erfolgreich bei GitHub mit den korrekten Rechten angemeldet."


# 3. BENUTZERNAME LADEN/SPEICHERN
if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
    echo "‚Ñπ Found saved username: $GITHUB_USER"
else
    read -p "$TEXT_PROMPT_USERNAME" GITHUB_USER
    if [ -z "$GITHUB_USER" ]; then echo "‚ùå Name cannot be empty."; exit 1; fi
    echo "GITHUB_USER=\"$GITHUB_USER\"" > "$CONFIG_FILE"
    echo "‚úî Your username has been saved for the next run."
fi

# 4. PROJEKT-SETUP
echo "-------------------------------------------"
echo "üöÄ Starting the wizard for '$GITHUB_USER'..."

echo "1/5: Loading repositories..."
REPOS_LIST=$(gh repo list @me --limit 1000 --json "nameWithOwner" --jq '.[].nameWithOwner')
if [ -z "$REPOS_LIST" ]; then echo "‚ùå No repositories found for '$GITHUB_USER'."; exit 1; fi

echo -e "2/5: Select the sub-repos to fuse:\n(Navigation: Arrow keys, Selection: TAB, Confirmation: ENTER)"
SELECTED_REPOS=$(echo "$REPOS_LIST" | fzf --multi --height 40% --border --prompt="Select> ")
if [ -z "$SELECTED_REPOS" ]; then echo "‚ùå Aborted: No repositories selected."; exit 1; fi
SUB_REPOS=$(echo "$SELECTED_REPOS" | tr '\n' ',' | sed 's/,$//')

read -p "$TEXT_PROMPT_FUSION_NAME" FUSION_REPO_NAME
if [ -z "$FUSION_REPO_NAME" ]; then echo "‚ùå Error: Repo name cannot be empty."; exit 1; fi

# 5. UPDATE-OPTIONEN
echo "-------------------------------------------"
echo "‚öôÔ∏è Configuring update methods..."
CRON_SCHEDULE=""
read -p "$TEXT_PROMPT_SCHEDULE" ACTIVATE_SCHEDULE
if [[ "$ACTIVATE_SCHEDULE" =~ ^[YyJj]$ ]]; then
    read -p "$TEXT_PROMPT_SCHEDULE_HOURS" SCHEDULE_HOURS
    CRON_SCHEDULE="  schedule:\n    - cron: '0 */${SCHEDULE_HOURS:-24} * * *'"
fi

SETUP_WEBHOOKS=false
read -p "$TEXT_PROMPT_WEBHOOKS" ACTIVATE_WEBHOOKS
if [[ "$ACTIVATE_WEBHOOKS" =~ ^[YyJj]$ ]]; then
    SETUP_WEBHOOKS=true
fi

# 6. REPO ERSTELLEN & AUTHENTIFIZIEREN
echo "-> Creating repo '$FUSION_REPO_NAME'..."
gh repo create "$GITHUB_USER/$FUSION_REPO_NAME" --public --description "Automatic fusion repo by MonoMono" >/dev/null || { echo "‚ùå Error creating the GitHub repo."; exit 1; }

echo
echo "--------------------------------------------------------------------"
echo "üîë INFO: ACCESS TOKEN REQUIRED"
read -p "? Press ENTER to open the token creation page in your browser..."
open_url "https://github.com/settings/tokens/new"
echo "‚ÄºÔ∏è INSTRUCTIONS: In your browser, select the 'repo' scope, generate the token, and copy it."
echo "--------------------------------------------------------------------"
PAT=""
while [ -z "$PAT" ]; do read -s -p "üëâ Please paste the copied token here and press ENTER: " PAT; echo; done
echo -n "$PAT" | gh secret set ACCESS_TOKEN --repo "$GITHUB_USER/$FUSION_REPO_NAME" || { echo "‚ùå Error setting the secret."; exit 1; }
echo "‚úî Secret successfully saved in the repository '$FUSION_REPO_NAME'."

# 7. WORKFLOW ERSTELLEN & PUSHEN
WORKFLOW_NAME="Fusion-Repo Erstellen & Aktualisieren"
ON_TRIGGERS="on:\n  workflow_dispatch:\n"
if [ -n "$CRON_SCHEDULE" ]; then ON_TRIGGERS+="$CRON_SCHEDULE\n"; fi
if $SETUP_WEBHOOKS; then ON_TRIGGERS+="  repository_dispatch:\n    types: [monomono-sync-event]\n"; fi

read -r -d '' WORKFLOW_CONTENT << EOM
name: '$WORKFLOW_NAME'
$ON_TRIGGERS
jobs:
  sync-repos:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout fusion repo
        uses: actions/checkout@v4
      - name: Clone sub-repos
        run: |
          REPOS_TO_SYNC=\${{ inputs.repos || '$SUB_REPOS' }}
          for repo in \$(echo "\$REPOS_TO_SYNC" | sed 's/,/ /g'); do
            folder_name=\$(basename \$repo)
            echo "-> Cloning \$repo into \$folder_name..."
            git clone --depth 1 https://\${{ secrets.ACCESS_TOKEN }}@github.com/\$repo.git \$folder_name && rm -rf \$folder_name/.git
          done
      - name: Create README
        run: |
          REPOS_TO_SYNC=\${{ inputs.repos || '$SUB_REPOS' }}
          echo "# Fusion-Repo" > README.md
          echo "" >> README.md
          echo "This repository is an automatic fusion of the following projects:" >> README.md
          for repo in \$(echo "\$REPOS_TO_SYNC" | sed 's/,/ /g'); do
            echo "- [\$repo](https://github.com/\$repo)" >> README.md
          done
          echo "" >> README.md
          echo "Last update: \$(date)" >> README.md
      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          if ! git diff-index --quiet HEAD; then
            git commit -m "Fusion-Repo: Sync sub-repos"
            git pull --rebase
            git push
          else
            echo "No new changes found in sub-repos."
          fi
EOM

echo "-> Setting up a temporary local clone to push the workflow..."
TEMP_DIR=$(mktemp -d)
cd "$TEMP_DIR" || exit 1
gh repo clone "$GITHUB_USER/$FUSION_REPO_NAME" . >/dev/null 2>&1 || { echo "‚ùå Error cloning the new repo."; rm -rf "$TEMP_DIR"; exit 1; }
mkdir -p .github/workflows
echo "$WORKFLOW_CONTENT" > .github/workflows/sync.yml
git config user.name "MonoMono Script"
git config user.email "bot@users.noreply.github.com"
git add .
git commit -m "CI: Add initial sync workflow"
git push --force || { echo "‚ùå Error pushing the workflow."; rm -rf "$TEMP_DIR"; exit 1; }
cd - >/dev/null
rm -rf "$TEMP_DIR"
echo "‚úî Workflow file successfully pushed to GitHub."

# 8. WEBHOOKS EINRICHTEN
if $SETUP_WEBHOOKS; then
    echo "-> Setting up webhooks for the selected sub-repos..."
    DISPATCH_URL="https://api.github.com/repos/$GITHUB_USER/$FUSION_REPO_NAME/dispatches"
    for repo in $(echo $SUB_REPOS | sed "s/,/ /g"); do
        echo "   - For repo: $repo"
        gh api --method POST "repos/$repo/hooks" \
           -f "name=web" -f "active=true" -f "events[]=push" \
           -f "config[url]=$DISPATCH_URL" -f "config[content_type]=json" \
           -F "event_type=monomono-sync-event" \
           --silent || echo "     ‚ùå Error setting up webhook for $repo."
    done
fi

# 9. WORKFLOW STARTEN
echo "-> Waiting for the workflow to be visible on GitHub..."
WORKFLOW_FOUND=false
for i in {1..5}; do
  if gh workflow list --repo "$GITHUB_USER/$FUSION_REPO_NAME" 2>/dev/null | grep -q "$WORKFLOW_NAME"; then
    echo "‚úî Workflow found."; WORKFLOW_FOUND=true; break;
  fi
  if [ $i -lt 5 ]; then echo "   - Not found yet, trying again in 2 seconds..."; sleep 2; fi
done
if ! $WORKFLOW_FOUND; then echo "‚ùå Error: Workflow not found after 10 seconds."; exit 1; fi

echo "-> Starting the first workflow run..."
gh workflow run sync.yml --repo "$GITHUB_USER/$FUSION_REPO_NAME" || { echo "‚ùå Error starting the workflow."; exit 1; }

echo
echo "$TEXT_ALL_DONE"
echo "üëÄ Track the progress here: https://github.com/$GITHUB_USER/$FUSION_REPO_NAME/actions"