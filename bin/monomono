#!/bin/bash
# ==============================================================================
# MONOMONO - HAUPTSKRIPT (v13.0 - FUSIONIERT & FINAL)
# ==============================================================================
# Dieses Skript kombiniert die robuste Hybrid-Authentifizierung mit der
# plattformunabh√§ngigen .pem-Inhaltsabfrage f√ºr maximale Stabilit√§t.
# ==============================================================================

# --- Konfiguration & Globale Variablen ---
CONFIG_DIR="$HOME/.monomono"
CONFIG_FILE="$CONFIG_DIR/config.json"
TEMP_KEY_FILE="$CONFIG_DIR/temp_private_key.pem" # Fester Ort f√ºr den Key

# --- Befehlslogik (Hilfe & Reset) ---
case "$1" in
    --help|-h)
        echo "Benutzung: monomono"
        echo "Startet den interaktiven Wizard zur Erstellung eines Fusion-Repos."
        echo
        echo "Optionen:"
        echo "  -h, --help   Zeigt diese Hilfe an."
        echo "  --reset      L√∂scht die lokale Konfiguration von MonoMono."
        exit 0
        ;;
    --reset)
        if [ -d "$CONFIG_DIR" ]; then rm -rf "$CONFIG_DIR"; echo "‚úî Konfiguration zur√ºckgesetzt."; fi
        exit 0
        ;;
esac

# --- Hilfsfunktionen ---

# Funktion zur sauberen Konfigurations-Aktualisierung
update_config() {
    if [ ! -f "$CONFIG_FILE" ]; then echo "{}" > "$CONFIG_FILE"; fi
    TMP_JSON=$(jq --arg key "$1" --arg value "$2" '.[$key] = $value' "$CONFIG_FILE")
    echo "$TMP_JSON" > "$CONFIG_FILE"
}

# App-Setup-Wizard (Korrigierte Version)
ensure_app_configured() {
    # --- KORREKTUR: Erstelle den Konfigurationsordner SOFORT ---
    # Damit ist sichergestellt, dass er bei der ersten Benutzung von update_config existiert.
    mkdir -p "$CONFIG_DIR"

    if [ -f "$CONFIG_FILE" ] && jq -e '.app_id' "$CONFIG_FILE" >/dev/null 2>&1; then
        echo "‚úî MonoMono App-Konfiguration gefunden."
        return 0
    fi

    # Der restliche Wizard bleibt identisch...
    echo "--------------------------------------------------------------------"
    echo "üîë INFO: EINMALIGES APP-SETUP N√ñTIG"
    echo "--------------------------------------------------------------------"
    echo "‚ÄºÔ∏è  AKTION ERFORDERLICH: Bitte √∂ffne diese URL in deinem lokalen Browser:"
    echo "    https://github.com/settings/apps/new"
    echo
    echo "--- ANLEITUNG IM BROWSER ---"
    # ... (Rest der Anleitung)
    echo "5. Klicke ganz unten auf 'Create GitHub App'."
    echo "--------------------------------------------------------------------"
    read -p "? Dr√ºcke ENTER, nachdem du die App erstellt hast..."
    echo
    echo "‚öôÔ∏è  DATEN SAMMELN"
    echo "===================================================================="

    echo "‚û°Ô∏è  Schritt 1: App Name & ID"
    echo "---------------------------------------------------"
    read -p "? Bitte gib den exakten Namen deiner App ein: " NEW_APP_NAME
    update_config "app_name" "$NEW_APP_NAME"
    read -p "? Bitte gib die numerische 'App ID' ein: " NEW_APP_ID
    update_config "app_id" "$NEW_APP_ID"
    echo "‚úÖ App-Name und ID gespeichert."
    echo ""

    echo "‚û°Ô∏è  Schritt 2: GitHub App Private Key"
    echo "---------------------------------------------------"
    echo "1. Klicke auf der App-Seite auf [Generate a private key]."
    echo "2. Dein Browser l√§dt eine .pem-Datei herunter."
    echo "3. √ñFFNE diese .pem-Datei auf deinem PC mit einem Texteditor."
    echo "4. KOPIERE den gesamten Inhalt (inkl. -----BEGIN/END----- Zeilen)."
    echo "5. F√ºge den Inhalt hier ein und dr√ºcke dann Strg+D (auf einer neuen Zeile)."
    echo "? Bitte f√ºge jetzt den Inhalt des Private Keys ein:"
    PEM_CONTENT=$(cat)

    if [ -z "$PEM_CONTENT" ]; then echo "‚ùå Fehler: Es wurde kein Inhalt eingef√ºgt. Abbruch." >&2; exit 1; fi

    echo "$PEM_CONTENT" > "$TEMP_KEY_FILE"
    chmod 600 "$TEMP_KEY_FILE"
    update_config "private_key_path" "$TEMP_KEY_FILE"
    echo "‚úÖ Private Key sicher gespeichert und Pfad in der Konfiguration hinterlegt."
    echo ""
    echo "--------------------------------------------------------------------"
    echo "‚úÖ App-Konfiguration erfolgreich abgeschlossen!"
    echo "--------------------------------------------------------------------"
}

# Holt einen kurzlebigen Installation-Token f√ºr die App
get_installation_token() {
    APP_ID=$(jq -r '.app_id' "$CONFIG_FILE")
    PRIVATE_KEY_PATH=$(jq -r '.private_key_path' "$CONFIG_FILE")
    APP_NAME=$(jq -r '.app_name' "$CONFIG_FILE")
    GITHUB_USER=$(jq -r '.github_user' "$CONFIG_FILE")

    if [ ! -f "$PRIVATE_KEY_PATH" ]; then echo "‚ùå Fehler: Die .pem-Datei wurde unter '$PRIVATE_KEY_PATH' nicht gefunden."; exit 1; fi

    NOW=$(date +%s); IAT=$(($NOW - 60)); EXP=$(($NOW + 600))
    HEADER_B64=$(echo -n '{"alg":"RS256","typ":"JWT"}' | base64 | tr -d '\n' | tr -d '=' | tr '/+' '_-')
    PAYLOAD_B64=$(echo -n "{\"iat\":$IAT,\"exp\":$EXP,\"iss\":\"$APP_ID\"}" | base64 | tr -d '\n' | tr -d '=' | tr '/+' '_-')
    SIGNATURE_B64=$(openssl dgst -sha256 -sign "$PRIVATE_KEY_PATH" <(echo -n "$HEADER_B64.$PAYLOAD_B64") | base64 | tr -d '\n' | tr -d '=' | tr '/+' '_-')
    JWT="$HEADER_B64.$PAYLOAD_B64.$SIGNATURE_B64"

    INSTALLATION_ID=$(curl -s -H "Authorization: Bearer $JWT" -H "Accept: application/vnd.github.v3+json" https://api.github.com/app/installations | jq ".[] | select(.account.login==\"$GITHUB_USER\") | .id")

    while [ -z "$INSTALLATION_ID" ]; do
        echo "--------------------------------------------------------------------"
        echo "‚ö†Ô∏è  AKTION ERFORDERLICH: Die App '$APP_NAME' ist noch nicht installiert."
        echo "   Bitte √∂ffne: https://github.com/settings/apps/$APP_NAME/installations"
        echo "   W√§hle 'All repositories' und klicke 'Install'."
        read -p "? Dr√ºcke ENTER, nachdem du die Installation abgeschlossen hast..."
        sleep 3
        INSTALLATION_ID=$(curl -s -H "Authorization: Bearer $JWT" -H "Accept: application/vnd.github.v3+json" https://api.github.com/app/installations | jq ".[] | select(.account.login==\"$GITHUB_USER\") | .id")
    done

    INSTALLATION_TOKEN=$(curl -s -X POST -H "Authorization: Bearer $JWT" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/app/installations/$INSTALLATION_ID/access_tokens" | jq -r '.token')
    if [ -z "$INSTALLATION_TOKEN" ] || [ "$INSTALLATION_TOKEN" == "null" ]; then echo "‚ùå Fehler beim Erstellen des Installation-Tokens."; exit 1; fi

    export GH_TOKEN=$INSTALLATION_TOKEN
    echo "‚úî Erfolgreich als MonoMono-App authentifiziert."
}

# --- HAUPTLOGIK ---

# 1. PR√úFUNG DER VORAUSSETZUNGEN
if ! command -v gh &>/dev/null || ! command -v fzf &>/dev/null || ! command -v jq &>/dev/null; then
    echo "üîé √úberpr√ºfe Systemanforderungen..."
    echo "--------------------------------------------------------------------"
    echo "‚ö†Ô∏è  Eines oder mehrere ben√∂tigte Werkzeuge sind nicht verf√ºgbar."
    echo "   Starte den einmaligen Installations-Assistenten..."
    echo "--------------------------------------------------------------------"
    read -p "? Ben√∂tigte Werkzeuge (gh, fzf, jq) fehlen. Jetzt installieren? (j/n) " choice
    if [[ ! "$choice" =~ ^[YyJj]$ ]]; then echo "‚ùå Abbruch durch Benutzer."; exit 1; fi
    
    OS_TYPE="$(uname -s)"
    case "$OS_TYPE" in
        Linux*)
            if command -v apt-get &>/dev/null; then
                sudo apt-get update
                if ! command -v gh &>/dev/null; then sudo apt-get install -y gh; fi
                if ! command -v fzf &>/dev/null; then sudo apt-get install -y fzf; fi
                if ! command -v jq &>/dev/null; then sudo apt-get install -y jq; fi
            elif command -v dnf &>/dev/null; then
                sudo dnf install -y gh fzf jq
            else
                echo "‚ùå Fehler: Konnte keinen passenden Paketmanager finden (apt, dnf)." >&2; exit 1
            fi;;
        Darwin*)
            if ! command -v brew &>/dev/null; then echo "‚ùå Fehler: Homebrew (brew) nicht gefunden."; exit 1; fi
            brew install gh fzf jq;;
        *) echo "‚ùå Fehler: Nicht unterst√ºtztes Betriebssystem ($OS_TYPE)." >&2; exit 1;;
    esac
    echo "‚úÖ SETUP ABGESCHLOSSEN. Bitte schlie√üe dieses Terminal und √∂ffne ein neues."
    exit 0
fi

# 2. ARBEITS-MODUS
echo "‚úî System bereit. Alle Werkzeuge gefunden."
ensure_app_configured

if [ -f "$CONFIG_FILE" ] && jq -e '.github_user' "$CONFIG_FILE" >/dev/null 2>&1; then
    GITHUB_USER=$(jq -r '.github_user' "$CONFIG_FILE")
else
    read -p "? Bitte gib deinen GitHub-Benutzernamen ein: " GITHUB_USER
    update_config "github_user" "$GITHUB_USER"
fi
echo "‚ÑπÔ∏è  Angemeldet als Benutzer: $GITHUB_USER"

# 3. AUTHENTIFIZIERUNG MIT PERSONAL ACCESS TOKEN (PAT)
echo "--------------------------------------------------------------------"
echo "üîë INFO: Ein pers√∂nlicher Zugriffstoken (PAT) wird f√ºr die Ersteinrichtung ben√∂tigt."
echo "‚ÄºÔ∏è  AKTION ERFORDERLICH: √ñffne https://github.com/settings/tokens/new"
echo "   Anleitung: W√§hle die Scopes 'repo' UND 'workflow' aus, generiere den Token."
echo "--------------------------------------------------------------------"
PAT=""
while [ -z "$PAT" ]; do
    read -s -p "üëâ Bitte f√ºge den kopierten Token hier ein und dr√ºcke ENTER: " PAT; echo
done
HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token $PAT" https://api.github.com/user)
if [ "$HTTP_STATUS" -ne 200 ]; then echo "‚ùå FEHLER: Der Token ist ung√ºltig (HTTP-Status: $HTTP_STATUS)." >&2; exit 1; fi
echo "‚úî Access Token ist g√ºltig."

# 4. PROJEKT-SETUP
echo "-------------------------------------------"
echo "üöÄ Starte den Assistenten..."
echo "1/5: Lade Repositories..."
REPOS_LIST=$(curl -s -H "Authorization: token $PAT" "https://api.github.com/user/repos?type=owner&per_page=100" | jq -r '.[].full_name')
if [ -z "$REPOS_LIST" ]; then echo "‚ùå Keine Repositories gefunden."; exit 1; fi

echo "2/5: W√§hle die zu fusionierenden Repos:"
SELECTED_REPOS=$(echo "$REPOS_LIST" | fzf --multi --height 40% --border --prompt="Auswahl> ")
if [ -z "$SELECTED_REPOS" ]; then echo "‚ùå Abbruch: Keine Repositories ausgew√§hlt."; exit 1; fi
SUB_REPOS=$(echo "$SELECTED_REPOS" | tr '\n' ',' | sed 's/,$//')

while true; do
    read -p "? 3/5: Wie soll das neue Fusions-Repo hei√üen? " FUSION_REPO_NAME
    if [[ ! "$FUSION_REPO_NAME" =~ ^[a-zA-Z0-9_.-]+$ ]]; then
        echo "‚ùå Fehler: Name darf nur Buchstaben, Zahlen, -, _ oder . enthalten."
    else break; fi
done

read -p "? 4/5: Soll das Repository 'privat' sein? (j/n) " IS_PRIVATE
VISIBILITY_FLAG=$([[ "$IS_PRIVATE" =~ ^[YyJj]$ ]] && echo "--private" || echo "--public")

# 5. UPDATE-OPTIONEN
echo "-------------------------------------------"
echo "‚öôÔ∏è 5/5: Konfiguriere die Update-Methoden..."
read -p "? M√∂chtest du einen zeitgesteuerten Sync aktivieren? (j/n) " ACTIVATE_SCHEDULE
CRON_SCHEDULE=""
if [[ "$ACTIVATE_SCHEDULE" =~ ^[YyJj]$ ]]; then
    read -p "? In welchem Intervall (in Stunden) soll der Sync laufen? (1-24) " SCHEDULE_HOURS
    CRON_SCHEDULE="  schedule:\n    - cron: '0 */${SCHEDULE_HOURS:-24} * * *'"
fi

read -p "? Sollen Echtzeit-Updates eingerichtet werden? (j/n) " ACTIVATE_WEBHOOKS
SETUP_WEBHOOKS=$([[ "$ACTIVATE_WEBHOOKS" =~ ^[YyJj]$ ]] && echo true || echo false)

# 6. REPO ERSTELLEN & WORKFLOWS EINRICHTEN
echo "-> Erstelle Repo '$FUSION_REPO_NAME'..."
GH_TOKEN=$PAT gh repo create "$GITHUB_USER/$FUSION_REPO_NAME" "$VISIBILITY_FLAG" --description "Fusion-Repo by MonoMono" >/dev/null || { echo "‚ùå Fehler beim Erstellen des Repos."; exit 1; }

echo "-> Wechsle zur App-Authentifizierung f√ºr Secrets & Workflows..."
get_installation_token

echo "-> Speichere App-Token als Secret im neuen Repo..."
echo -n "$GH_TOKEN" | gh secret set ACCESS_TOKEN --repo "$GITHUB_USER/$FUSION_REPO_NAME" || { echo "‚ùå Fehler beim Setzen des Secrets."; exit 1; }

# Vorlage f√ºr den Haupt-Workflow (Version 3.0 - mit Aufr√§um-Logik)
read -r -d '' SYNC_WORKFLOW_TEMPLATE << EOM
name: 'Fusion-Repo Sync'
on:
  workflow_dispatch:
  repository_dispatch:
    types: [monomono-sync-event]
jobs:
  sync-repos:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout fusion repo
        uses: actions/checkout@v4
        with:
          token: \${{ secrets.ACCESS_TOKEN }}

      - name: Sync and Rebuild
        run: |
          # == CONFIGURATION ==
          REPOS_TO_SYNC='${SUB_REPOS_NEW}' # Platzhalter wird vom Skript ersetzt

          # == STEP 1: CLEANUP GHOST DIRECTORIES (DER NEUE, ENTSCHEIDENDE SCHRITT) ==
          echo "-> Searching for obsolete directories to remove..."
          ALL_DIRS=\$(find . -maxdepth 1 -mindepth 1 -type d ! -name '.git' -exec basename {} \;)
          for dir in \$ALL_DIRS; do
              # Pr√ºfe, ob das Verzeichnis in der aktuellen Sync-Liste ist
              if ! echo "\$REPOS_TO_SYNC" | grep -q "\$dir"; then
                  echo "   - Deleting obsolete directory: \$dir"
                  rm -rf "\$dir"
              fi
          done

          # == STEP 2: CLONE SUB-REPOS ==
          git config --global url."https://x-access-token:\${{ secrets.ACCESS_TOKEN }}@github.com/".insteadOf "https://github.com/"
          for repo in \$(echo "\$REPOS_TO_SYNC" | sed 's/,/ /g'); do
            folder_name=\$(basename \$repo)
            echo "-> Cloning \$repo into \$folder_name..."
            # Es ist sicherer, erst zu l√∂schen, dann zu klonen, falls sich was ge√§ndert hat
            rm -rf "\$folder_name"
            git clone --depth 1 https://github.com/\$repo.git "\$folder_name" && rm -rf "\$folder_name/.git"
          done

          # == STEP 3: CREATE INTELLIGENT README ==
          sudo apt-get update -qq && sudo apt-get install -y tree >/dev/null
          echo "# ü§ñ MonoMono Fusions-Repo" > README.md
          echo "" >> README.md
          echo "## üó∫Ô∏è Projekt-Map" >> README.md
          echo "### üß© Komponenten" >> README.md
          for repo in \$(echo "\$REPOS_TO_SYNC" | sed 's/,/ /g'); do
            echo "- **[\$(basename \$repo)](./\$(basename \$repo))** (Original: [\$repo](https://github.com/\$repo))" >> README.md
          done
          echo "" >> README.md
          echo "### üå≥ Verzeichnisstruktur" >> README.md
          echo "\`\`\`" >> README.md
          tree -L 2 -I 'README.md' >> README.md
          echo "\`\`\`" >> README.md
          echo "" >> README.md
          echo "> Letzte Aktualisierung: \$(date)" >> README.md

          # == STEP 4: COMMIT AND PUSH ==
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          if ! git diff-index --quiet HEAD; then
            git commit -m "feat: Sync sub-repos and update project map"
            git push --force
          else
            echo "No new changes found."
          fi
EOM
TEMP_DIR=$(mktemp -d)
git clone "https://x-access-token:$PAT@github.com/$GITHUB_USER/$FUSION_REPO_NAME.git" "$TEMP_DIR" >/dev/null 2>&1
mkdir -p "$TEMP_DIR/.github/workflows"
echo -e "$WORKFLOW_CONTENT" > "$TEMP_DIR/.github/workflows/sync.yml"
cd "$TEMP_DIR" && git add . && git commit -m "CI: Add sync workflow" && git push --force >/dev/null 2>&1
cd - >/dev/null && rm -rf "$TEMP_DIR"
echo "‚úî Haupt-Workflow erfolgreich im Fusions-Repo platziert."

# 7. ECHTZEIT-SYNC EINRICHTEN (ROBUSTE METHODE)
if [[ "$SETUP_WEBHOOKS" = true ]]; then
    echo "-> Richte Echtzeit-Synchronisierung mit sicherem App-Token ein..."

    # Vorlage f√ºr den Trigger-Workflow. Nutzt jetzt den App-Token.
    read -r -d '' TRIGGER_WORKFLOW_CONTENT << EOM
name: MonoMono Sync Trigger
on:
  push:
    branches: [main, master]
jobs:
  dispatch:
    runs-on: ubuntu-latest
    steps:
      - name: Send dispatch to fusion repo
        env:
          FUSION_REPO: \${{ secrets.MONOMONO_FUSION_REPO }}
          # WICHTIG: Wir nutzen jetzt den sicheren App-Token
          GH_TOKEN: \${{ secrets.MONOMONO_APP_TOKEN }}
        run: |
          if [ -z "\$FUSION_REPO" ] || [ -z "\$GH_TOKEN" ]; then echo "Fehler: Secrets nicht gesetzt."; exit 1; fi
          gh api --method POST "repos/\$FUSION_REPO/dispatches" -f "event_type=monomono-sync-event"
EOM

    for repo in $(echo $SUB_REPOS | sed "s/,/ /g"); do
        echo "   - Konfiguriere Sub-Repo: $repo"
        
        # Setze die n√∂tigen Secrets im Sub-Repo
        # Secret 1: Der Name des Fusions-Repos
        gh secret set MONOMONO_FUSION_REPO --repo "$repo" --body "$GITHUB_USER/$FUSION_REPO_NAME"
        
        # Secret 2: Der sichere, kurzlebige App-Token (GH_TOKEN wurde von get_installation_token exportiert)
        gh secret set MONOMONO_APP_TOKEN --repo "$repo" --body "$GH_TOKEN"

        # Installiere den Trigger-Workflow
        # Wir nutzen hier den PAT, da nur der User das Recht hat, Workflows zu erstellen
        TEMP_SUB_DIR=$(mktemp -d)
        git clone "https://x-access-token:$PAT@github.com/$repo.git" "$TEMP_SUB_DIR" >/dev/null 2>&1
        
        mkdir -p "$TEMP_SUB_DIR/.github/workflows"
        echo -e "$TRIGGER_WORKFLOW_CONTENT" > "$TEMP_SUB_DIR/.github/workflows/monomono-trigger.yml"
        
        cd "$TEMP_SUB_DIR" || exit
        git config user.name "MonoMono Script"
        git add .github/workflows/monomono-trigger.yml
        if ! git diff-index --quiet HEAD; then
            git commit -m "feat: Add MonoMono sync trigger"
            git push
        else
            echo "   - Trigger-Workflow ist bereits aktuell."
        fi
        cd - >/dev/null
        rm -rf "$TEMP_SUB_DIR"
    done
    echo "‚úî Trigger-Workflows und sichere App-Tokens in Sub-Repos eingerichtet."
fi

# 8. WORKFLOW STARTEN
echo "-> Starte den ersten Sync-Lauf..."
gh workflow run sync.yml --repo "$GITHUB_USER/$FUSION_REPO_NAME"

echo
echo "‚úÖ Alles erledigt! Dein Fusions-Repo wird jetzt bef√ºllt."
echo "üëÄ Verfolge den Fortschritt hier: https://github.com/$GITHUB_USER/$FUSION_REPO_NAME/actions"