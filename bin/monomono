#!/bin/bash
# ==============================================================================
# MONOMONO - HAUPTSKRIPT (v5.0 - mit Update-Optionen)
# ==============================================================================
# Dieses Skript erstellt ein "Fusions-Repo" aus mehreren GitHub-Repositories.
# Es f√ºhrt ein robustes, einmaliges Setup f√ºr seine Abh√§ngigkeiten durch und
# bietet detaillierte Anleitungen, um eine reibungslose Benutzererfahrung
# zu gew√§hrleisten.
# ==============================================================================

# --- Konfiguration & Hilfsfunktionen ---
CONFIG_FILE="$HOME/.fusion_assistant_config"

# Hilfsfunktion, um eine URL im Standardbrowser zu √∂ffnen.
open_url() {
  local url=$1
  case "$(uname -s)" in
    Linux*)   xdg-open "$url" >/dev/null 2>&1 ;;
    Darwin*)  open "$url" ;;
    CYGWIN*|MINGW*|MSYS*) # Git Bash on Windows
              start "" "$url" ;;
    *)        echo "Konnte den Browser nicht automatisch √∂ffnen."
              echo "Bitte √∂ffne diese URL manuell: $url" ;;
  esac
}

# --- HAUPTLOGIK ---

# 1. PR√úFUNG DER VORAUSSETZUNGEN (wird √ºbersprungen, wenn Tools vorhanden sind)
if ! command -v gh &>/dev/null || ! command -v fzf &>/dev/null; then
    # Kompletter Setup-Prozess f√ºr neue Benutzer
    echo "üîé Pr√ºfe Systemvoraussetzungen..."
    echo "--------------------------------------------------------------------"
    echo "‚ö†Ô∏è  Eines oder mehrere ben√∂tigte Tools sind im Terminal nicht verf√ºgbar."
    echo "   Starte den einmaligen Installations-Assistenten..."
    echo "--------------------------------------------------------------------"
    INSTALL_CMD=""
    if command -v winget &>/dev/null; then INSTALL_CMD="winget"; fi
    if [ -z "$INSTALL_CMD" ]; then echo "‚ùå Fehler: Konnte keinen passenden Paketmanager (winget) finden."; exit 1; fi
    read -p "? Ben√∂tigte Tools (GitHub CLI, fzf) fehlen. Sollen sie jetzt installiert werden? (j/n) " choice
    if [[ "$choice" != "j" && "$choice" != "J" ]]; then echo "‚ùå Abbruch durch Benutzer."; exit 1; fi
    echo "-> Versuche Installation von 'GitHub CLI'..."; $INSTALL_CMD install --id GitHub.cli -e --accept-source-agreements
    echo "-> Versuche Installation von 'fzf'..."; $INSTALL_CMD install --id junegunn.fzf -e --accept-source-agreements
    echo
    echo "--------------------------------------------------------------------"
    echo "‚úÖ SETUP ABGESCHLOSSEN."
    echo
    echo "‚ÄºÔ∏è  WICHTIGER N√ÑCHSTER SCHRITT:"
    echo "   1. Bitte schlie√üe dieses Terminal-Fenster und √∂ffne ein brandneues."
    echo "   2. F√ºhre das Skript darin erneut aus."
    echo
    echo "üëâ Falls das Skript dann wider Erwarten immer noch das Setup startet,"
    echo "   starte bitte deinen Computer einmal komplett neu."
    echo "--------------------------------------------------------------------"
    exit 0
fi

# --- ARBEITS-MODUS ---
echo "‚úî System bereit. Alle Tools gefunden."

# 2. GITHUB-LOGIN
if ! gh auth status &>/dev/null; then
    echo
    echo "--------------------------------------------------------------------"
    echo "‚ÑπÔ∏è INFO: N√ÑCHSTER SCHRITT - GITHUB LOGIN"
    echo "Gleich startet der Login-Prozess mit 'gh auth login'."
    echo "üëâ Folge den Anweisungen im Terminal und im Browser."
    echo "--------------------------------------------------------------------"
    read -p "? Dr√ºcke ENTER, um den Login-Prozess zu starten..."
    gh auth login
fi
if ! gh auth status &>/dev/null; then echo "‚ùå Login fehlgeschlagen."; exit 1; fi
echo "‚úî Erfolgreich bei GitHub angemeldet."

# 3. BENUTZERNAME LADEN/SPEICHERN
if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
    echo "‚Ñπ Gespeicherten Benutzernamen gefunden: $GITHUB_USER"
else
    read -p "? Bitte gib deinen GitHub-Benutzernamen ein: " GITHUB_USER
    if [ -z "$GITHUB_USER" ]; then echo "‚ùå Name darf nicht leer sein."; exit 1; fi
    echo "GITHUB_USER=\"$GITHUB_USER\"" > "$CONFIG_FILE"
    echo "‚úî Dein Benutzername wurde f√ºr die n√§chste Ausf√ºhrung gespeichert."
fi

# 4. PROJEKT-SETUP
echo "-------------------------------------------"
echo "üöÄ Starte den Assistenten f√ºr '$GITHUB_USER'..."
echo "1/5: Lade Repositories..."
REPOS_LIST=$(gh repo list "$GITHUB_USER" --limit 1000 --json "nameWithOwner" --jq '.[].nameWithOwner')
if [ -z "$REPOS_LIST" ]; then echo "‚ùå Keine Repositories f√ºr '$GITHUB_USER' gefunden."; exit 1; fi

echo -e "2/5: W√§hle die zu fusionierenden Repos:\n(Navigation: Pfeiltasten, Auswahl: TAB, Best√§tigen: ENTER)"
SELECTED_REPOS=$(echo "$REPOS_LIST" | fzf --multi --height 40% --border --prompt="Auswahl> ")
if [ -z "$SELECTED_REPOS" ]; then echo "‚ùå Abbruch: Keine Repositories ausgew√§hlt."; exit 1; fi
SUB_REPOS=$(echo "$SELECTED_REPOS" | tr '\n' ',' | sed 's/,$//')

read -p "3/5: Wie soll das neue Fusions-Repo hei√üen? " FUSION_REPO_NAME
if [ -z "$FUSION_REPO_NAME" ]; then echo "‚ùå Fehler: Repo-Name darf nicht leer sein."; exit 1; fi

# 5. UPDATE-OPTIONEN
echo "-------------------------------------------"
echo "‚öôÔ∏è Konfiguriere die Update-Methoden..."
CRON_SCHEDULE=""
read -p "? M√∂chtest du einen automatischen, zeitgesteuerten Sync aktivieren? (j/n) " ACTIVATE_SCHEDULE
if [[ "$ACTIVATE_SCHEDULE" == "j" || "$ACTIVATE_SCHEDULE" == "J" ]]; then
    read -p "? In welchem Intervall (in Stunden) soll der Sync laufen? (1-24) " SCHEDULE_HOURS
    CRON_SCHEDULE="  schedule:\n    - cron: '0 */${SCHEDULE_HOURS:-24} * * *'"
fi

SETUP_WEBHOOKS=false
read -p "? Sollen Webhooks f√ºr Echtzeit-Updates bei jedem Push eingerichtet werden? (j/n) " ACTIVATE_WEBHOOKS
if [[ "$ACTIVATE_WEBHOOKS" == "j" || "$ACTIVATE_WEBHOOKS" == "J" ]]; then
    SETUP_WEBHOOKS=true
fi

# 6. REPO ERSTELLEN & AUTHENTIFIZIEREN
echo "-> Erstelle Repo '$FUSION_REPO_NAME'..."
gh repo create "$GITHUB_USER/$FUSION_REPO_NAME" --public --description "Automatisches Fusions-Repo von MonoMono" >/dev/null || { echo "‚ùå Fehler beim Erstellen des GitHub-Repos."; exit 1; }

echo
echo "--------------------------------------------------------------------"
echo "üîë INFO: ZUGRIFFS-TOKEN BEN√ñTIGT"
read -p "? Dr√ºcke ENTER, um die Token-Erstellung im Browser zu √∂ffnen..."
open_url "https://github.com/settings/tokens/new"
echo "‚ÄºÔ∏è ANLEITUNG: W√§hle im Browser 'repo' aus, generiere den Token und kopiere ihn."
echo "--------------------------------------------------------------------"
PAT=""
while [ -z "$PAT" ]; do read -s -p "üëâ Bitte f√ºge den kopierten Token hier ein und dr√ºcke ENTER: " PAT; echo; done
echo -n "$PAT" | gh secret set ACCESS_TOKEN --repo "$GITHUB_USER/$FUSION_REPO_NAME" || { echo "‚ùå Fehler beim Setzen des Secrets."; exit 1; }
echo "‚úî Secret erfolgreich im Repository '$FUSION_REPO_NAME' gespeichert."

# 7. WORKFLOW ERSTELLEN & PUSHEN
WORKFLOW_NAME="Fusion-Repo Erstellen & Aktualisieren"
ON_TRIGGERS="on:\n  workflow_dispatch:\n"
if [ -n "$CRON_SCHEDULE" ]; then ON_TRIGGERS+="$CRON_SCHEDULE\n"; fi
if $SETUP_WEBHOOKS; then ON_TRIGGERS+="  repository_dispatch:\n    types: [monomono-sync-event]\n"; fi

read -r -d '' WORKFLOW_CONTENT << EOM
name: '$WORKFLOW_NAME'
$ON_TRIGGERS
jobs:
  sync-repos:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Fusions-Repo auschecken
        uses: actions/checkout@v4
      - name: Sub-Repos klonen
        run: |
          REPOS_TO_SYNC=\${{ inputs.repos || '$SUB_REPOS' }}
          for repo in \$(echo "\$REPOS_TO_SYNC" | sed 's/,/ /g'); do
            folder_name=\$(basename \$repo)
            echo "-> Klone \$repo in den Ordner \$folder_name..."
            git clone --depth 1 https://\${{ secrets.ACCESS_TOKEN }}@github.com/\$repo.git \$folder_name && rm -rf \$folder_name/.git
          done
      - name: README erstellen
        run: |
          REPOS_TO_SYNC=\${{ inputs.repos || '$SUB_REPOS' }}
          echo "# Fusion-Repo" > README.md
          echo "" >> README.md
          echo "Dieses Repository ist ein automatischer Zusammenschluss der folgenden Projekte:" >> README.md
          for repo in \$(echo "\$REPOS_TO_SYNC" | sed 's/,/ /g'); do
            echo "- [\$repo](https://github.com/\$repo)" >> README.md
          done
          echo "" >> README.md
          echo "Letzte Aktualisierung: \$(date)" >> README.md
      - name: √Ñnderungen committen & pushen
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          if ! git diff-index --quiet HEAD; then
            git commit -m "Fusion-Repo: Sub-Repos synchronisiert"
            git pull --rebase
            git push
          else
            echo "Keine neuen √Ñnderungen in den Sub-Repos gefunden."
          fi
EOM

echo "-> Richte tempor√§ren lokalen Klon ein, um den Workflow zu pushen..."
TEMP_DIR=$(mktemp -d)
cd "$TEMP_DIR" || exit 1
gh repo clone "$GITHUB_USER/$FUSION_REPO_NAME" . >/dev/null 2>&1 || { echo "‚ùå Fehler beim Klonen des neuen Repos."; rm -rf "$TEMP_DIR"; exit 1; }
mkdir -p .github/workflows
echo "$WORKFLOW_CONTENT" > .github/workflows/sync.yml
git config user.name "MonoMono Script"
git config user.email "bot@users.noreply.github.com"
git add .
git commit -m "CI: Add initial sync workflow"
git push --force || { echo "‚ùå Fehler beim Pushen des Workflows."; rm -rf "$TEMP_DIR"; exit 1; }
cd - >/dev/null
rm -rf "$TEMP_DIR"
echo "‚úî Workflow-Datei erfolgreich auf GitHub gepusht."

# 8. WEBHOOKS EINRICHTEN
if $SETUP_WEBHOOKS; then
    echo "-> Richte Webhooks f√ºr die ausgew√§hlten Sub-Repos ein..."
    DISPATCH_URL="https://api.github.com/repos/$GITHUB_USER/$FUSION_REPO_NAME/dispatches"
    for repo in $(echo $SUB_REPOS | sed "s/,/ /g"); do
        echo "   - F√ºr Repo: $repo"
        gh api --method POST "repos/$repo/hooks" \
           -f "name=web" -f "active=true" -f "events[]=push" \
           -f "config[url]=$DISPATCH_URL" -f "config[content_type]=json" \
           -F "event_type=monomono-sync-event" \
           --silent || echo "     ‚ùå Fehler beim Einrichten des Webhooks f√ºr $repo."
    done
fi

# 9. WORKFLOW STARTEN
echo "-> Warte, bis der Workflow auf GitHub sichtbar ist..."
WORKFLOW_FOUND=false
for i in {1..5}; do
  if gh workflow list --repo "$GITHUB_USER/$FUSION_REPO_NAME" 2>/dev/null | grep -q "$WORKFLOW_NAME"; then
    echo "‚úî Workflow gefunden."; WORKFLOW_FOUND=true; break;
  fi
  if [ $i -lt 5 ]; then echo "   - Noch nicht gefunden, versuche es in 2 Sekunden erneut..."; sleep 2; fi
done
if ! $WORKFLOW_FOUND; then echo "‚ùå Fehler: Workflow wurde nach 10 Sekunden nicht gefunden."; exit 1; fi

echo "-> Starte den ersten Lauf des Workflows..."
gh workflow run sync.yml --repo "$GITHUB_USER/$FUSION_REPO_NAME" || { echo "‚ùå Fehler beim Starten des Workflows."; exit 1; }

echo
echo "‚úÖ Alles erledigt! Dein Fusions-Repo '$FUSION_REPO_NAME' wird jetzt bef√ºllt."
echo "üëÄ Verfolge den Fortschritt hier: https://github.com/$GITHUB_USER/$FUSION_REPO_NAME/actions"