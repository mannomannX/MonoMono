#!/bin/bash
# ==============================================================================
# FUSION-REPO ASSISTENT (FINALE VERSION 4.7 - mit erzwungenem Start-Push)
# ==============================================================================
# Dieses Skript erstellt ein "Fusions-Repo" aus mehreren GitHub-Repositories.
# Es f√ºhrt ein robustes, einmaliges Setup f√ºr seine Abh√§ngigkeiten durch und
# bietet detaillierte Anleitungen, um eine reibungslose Benutzererfahrung
# zu gew√§hrleisten.
# ==============================================================================

# --- Konfiguration & Befehlslogik ---
CONFIG_FILE="$HOME/.fusion_assistant_config"

case "$1" in
    --help|-h)
        echo "Fusions-Repo Assistent (Finale Edition)"
        echo "-------------------------------------------"
        echo "Erstellt ein 'Fusions-Repo' und f√ºhrt bei Bedarf ein einmaliges Setup aus."
        echo
        echo "Verwendung:"
        echo "  bash $(basename "$0")          - Startet den Assistenten."
        echo "  bash $(basename "$0") --reset  - L√∂scht den gespeicherten GitHub-Benutzernamen."
        echo "  bash $(basename "$0") --help   - Zeigt diese Hilfe an."
        exit 0
        ;;
    --reset)
        if [ -f "$CONFIG_FILE" ]; then
            rm "$CONFIG_FILE"
            echo "‚úî Gespeicherter Benutzername wurde zur√ºckgesetzt."
        else
            echo "‚Ñπ Es war kein Benutzername zum Zur√ºcksetzen gespeichert."
        fi
        exit 0
        ;;
esac

# Hilfsfunktion, um eine URL im Standardbrowser zu √∂ffnen.
open_url() {
  local url=$1
  case "$(uname -s)" in
    Linux*)   xdg-open "$url" >/dev/null 2>&1 ;;
    Darwin*)  open "$url" ;;
    CYGWIN*|MINGW*|MSYS*) # Git Bash on Windows
              start "" "$url" ;;
    *)        echo "Konnte den Browser nicht automatisch √∂ffnen."
              echo "Bitte √∂ffne diese URL manuell: $url" ;;
  esac
}


# --- HAUPTLOGIK ---

# 1. UMFASSENDE PR√úFUNG DER VORAUSSETZUNGEN
echo "üîé Pr√ºfe Systemvoraussetzungen..."

if ! command -v gh &>/dev/null || ! command -v fzf &>/dev/null; then
    # --- SETUP-MODUS ---
    echo "--------------------------------------------------------------------"
    echo "‚ö†Ô∏è  Eines oder mehrere ben√∂tigte Tools sind im Terminal nicht verf√ºgbar."
    echo "   Starte den einmaligen Installations-Assistenten..."
    echo "--------------------------------------------------------------------"

    INSTALL_CMD=""
    if command -v winget &>/dev/null; then
        INSTALL_CMD="winget"
    fi

    if [ -z "$INSTALL_CMD" ]; then
        echo "‚ùå Fehler: Konnte keinen passenden Paketmanager (winget) finden."
        exit 1
    fi
    
    read -p "? Ben√∂tigte Tools (GitHub CLI, fzf) fehlen. Sollen sie jetzt installiert werden? (j/n) " choice
    if [[ "$choice" != "j" && "$choice" != "J" ]]; then
        echo "‚ùå Abbruch durch Benutzer."
        exit 1
    fi

    echo "-> Versuche Installation von 'GitHub CLI'..."
    $INSTALL_CMD install --id GitHub.cli -e --accept-source-agreements

    echo "-> Versuche Installation von 'fzf'..."
    $INSTALL_CMD install --id junegunn.fzf -e --accept-source-agreements

    echo
    echo "--------------------------------------------------------------------"
    echo "‚úÖ SETUP ABGESCHLOSSEN."
    echo
    echo "‚ÄºÔ∏è  WICHTIGER N√ÑCHSTER SCHRITT:"
    echo "   1. Bitte schlie√üe dieses Terminal-Fenster und √∂ffne ein brandneues."
    echo "   2. F√ºhre das Skript darin erneut aus."
    echo
    echo "üëâ Falls das Skript dann wider Erwarten immer noch das Setup startet,"
    echo "   starte bitte deinen Computer einmal komplett neu. Das l√∂st das"
    echo "   Problem garantiert."
    echo "--------------------------------------------------------------------"
    exit 0
fi

# --- ARBEITS-MODUS ---
echo "‚úî System bereit. Alle Tools gefunden."

echo
echo "--------------------------------------------------------------------"
echo "‚ÑπÔ∏è INFO: N√ÑCHSTER SCHRITT - GITHUB LOGIN"
echo "Gleich startet der Login-Prozess mit 'gh auth login'."
echo
echo "M√∂glicherweise erscheint ein Fenster namens 'Credential Helper Selector'."
echo "Das ist ein Standard-Passwort-Safe von Git. Es ist eine einmalige Einrichtung."
echo "üëâ Falls es erscheint, w√§hle 'manager' und setze den Haken bei 'Always use'."
echo
echo "‚è≥ Nach deiner Auswahl (oder dem Login im Browser) kann es einen Moment"
echo "   dauern, w√§hrend im Hintergrund alles eingerichtet wird. Bitte habe Geduld."
echo "--------------------------------------------------------------------"
read -p "? Dr√ºcke ENTER, um den Login-Prozess zu starten..."

# 2. GITHUB-LOGIN-PR√úFUNG
if ! gh auth status &>/dev/null; then
    gh auth login
fi
if ! gh auth status &>/dev/null; then echo "‚ùå Login fehlgeschlagen."; exit 1; fi
echo "‚úî Erfolgreich bei GitHub angemeldet."

# 3. BENUTZERNAMEN-LOGIK
if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
    echo "‚Ñπ Gespeicherten Benutzernamen gefunden: $GITHUB_USER"
else
    read -p "? Bitte gib deinen GitHub-Benutzernamen ein: " GITHUB_USER
    if [ -z "$GITHUB_USER" ]; then echo "‚ùå Name darf nicht leer sein."; exit 1; fi
    echo "GITHUB_USER=\"$GITHUB_USER\"" > "$CONFIG_FILE"
    echo "‚úî Dein Benutzername wurde f√ºr die n√§chste Ausf√ºhrung gespeichert."
fi

# 4. PROJEKT-SETUP
echo "-------------------------------------------"
echo "üöÄ Starte den Assistenten f√ºr '$GITHUB_USER'..."
echo "1/4: Lade Repositories..."
REPOS_LIST=$(gh repo list "$GITHUB_USER" --limit 1000 --json "nameWithOwner" --jq '.[].nameWithOwner')
if [ -z "$REPOS_LIST" ]; then echo "‚ùå Keine Repositories f√ºr '$GITHUB_USER' gefunden."; exit 1; fi

echo -e "2/4: W√§hle die zu fusionierenden Repos:\n(Navigation: Pfeiltasten, Auswahl: TAB, Best√§tigen: ENTER)"
SELECTED_REPOS=$(echo "$REPOS_LIST" | fzf --multi --height 40% --border --prompt="Auswahl> ")
if [ -z "$SELECTED_REPOS" ]; then echo "‚ùå Abbruch: Keine Repositories ausgew√§hlt."; exit 1; fi
SUB_REPOS=$(echo "$SELECTED_REPOS" | tr '\n' ',' | sed 's/,$//')

read -p "3/4: Wie soll das neue Fusions-Repo hei√üen? " FUSION_REPO_NAME
if [ -z "$FUSION_REPO_NAME" ]; then echo "‚ùå Fehler: Repo-Name darf nicht leer sein."; exit 1; fi

echo "4/4: Erstelle Repo '$FUSION_REPO_NAME' und richte den Workflow ein..."
gh repo create "$GITHUB_USER/$FUSION_REPO_NAME" --public --description "Automatisches Fusions-Repo" >/dev/null || { echo "‚ùå Fehler beim Erstellen des GitHub-Repos."; exit 1; }

# DELUXE AUTHENTIFIZIERUNGS-WORKFLOW
echo
echo "--------------------------------------------------------------------"
echo "üîë INFO: ZUGRIFFS-TOKEN BEN√ñTIGT"
echo "Damit der Workflow deine privaten Repositories klonen kann, ist ein"
echo "einmaliger manueller Schritt n√∂tig: das Erstellen eines Tokens."
echo
echo "Das Skript wird dich jetzt bestm√∂glich dabei unterst√ºtzen."
echo "--------------------------------------------------------------------"
read -p "? Dr√ºcke ENTER, um die Token-Erstellung im Browser zu √∂ffnen..."

echo "-> √ñffne die GitHub-Seite zum Erstellen eines Tokens im Browser..."
open_url "https://github.com/settings/tokens/new"

echo
echo "--------------------------------------------------------------------"
echo "‚ÄºÔ∏è ANLEITUNG IM BROWSER:"
echo "   1. Note: Gib dem Token einen Namen (z.B. 'Fusion_Script_Token')."
echo "   2. Scopes: W√§hle den Haken bei 'repo'."
echo "   3. Klicke ganz unten auf 'Generate token'."
echo "   4. KOPIERE den neuen Token (er sieht so aus: ghp_...)."
echo "   Wichtiger Hinweis: Der Token wird nur dieses eine Mal angezeigt."
echo "   Wenn du das Fenster schlie√üt, musst du ihn bei Bedarf neu generieren."
echo "--------------------------------------------------------------------"

PAT=""
while [ -z "$PAT" ]; do
    read -s -p "üëâ Bitte f√ºge den kopierten Token hier ein und dr√ºcke ENTER: " PAT
    echo
done

echo "-> Speichere den Token sicher als 'ACCESS_TOKEN' Secret im Repo..."
echo -n "$PAT" | gh secret set ACCESS_TOKEN --repo "$GITHUB_USER/$FUSION_REPO_NAME" || { echo "‚ùå Fehler beim Setzen des Secrets."; exit 1; }
echo "‚úî Secret erfolgreich im Repository '$FUSION_REPO_NAME' gespeichert."


# Workflow-Content als 'Here Document'
WORKFLOW_NAME="Fusion-Repo Erstellen & Aktualisieren"
read -r -d '' WORKFLOW_CONTENT << EOM
name: '$WORKFLOW_NAME'
on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      repos:
        description: 'Sub-Repos (z.B. user/repo1,user/repo2)'
        required: false
        type: string
jobs:
  sync-repos:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Fusions-Repo auschecken
        uses: actions/checkout@v4
      - name: Sub-Repos klonen
        run: |
          REPOS_TO_SYNC=\${{ inputs.repos || '$SUB_REPOS' }}
          for repo in \$(echo "\$REPOS_TO_SYNC" | sed 's/,/ /g'); do
            folder_name=\$(basename \$repo)
            echo "-> Klone \$repo in den Ordner \$folder_name..."
            git clone --depth 1 https://\${{ secrets.ACCESS_TOKEN }}@github.com/\$repo.git \$folder_name && rm -rf \$folder_name/.git
          done
      - name: README erstellen
        run: |
          REPOS_TO_SYNC=\${{ inputs.repos || '$SUB_REPOS' }}
          echo "# Fusion-Repo" > README.md
          echo "" >> README.md
          echo "Dieses Repository ist ein automatischer Zusammenschluss der folgenden Projekte:" >> README.md
          for repo in \$(echo "\$REPOS_TO_SYNC" | sed 's/,/ /g'); do
            echo "- [\$repo](https://github.com/\$repo)" >> README.md
          done
          echo "" >> README.md
          echo "Letzte Aktualisierung: \$(date)" >> README.md
      - name: √Ñnderungen committen & pushen
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          if ! git diff-index --quiet HEAD; then
            git commit -m "Fusion-Repo: Sub-Repos synchronisiert"
            git pull --rebase
            git push
          else
            echo "Keine neuen √Ñnderungen in den Sub-Repos gefunden."
          fi
EOM

# Die robuste Git-Methode: Workflow-Datei lokal erstellen und pushen.
echo "-> Richte tempor√§ren lokalen Klon ein, um den Workflow zu pushen..."
TEMP_DIR=$(mktemp -d)
cd "$TEMP_DIR" || exit 1
gh repo clone "$GITHUB_USER/$FUSION_REPO_NAME" . >/dev/null 2>&1 || { echo "‚ùå Fehler beim Klonen des neuen Repos."; rm -rf "$TEMP_DIR"; exit 1; }
mkdir -p .github/workflows
echo "$WORKFLOW_CONTENT" > .github/workflows/sync.yml
git config user.name "Fusion Script"
git config user.email "bot@users.noreply.github.com"
git add .
git commit -m "CI: Add initial sync workflow"
git push --force || { echo "‚ùå Fehler beim Pushen des Workflows."; rm -rf "$TEMP_DIR"; exit 1; }
cd - >/dev/null
rm -rf "$TEMP_DIR"
echo "‚úî Workflow-Datei erfolgreich auf GitHub gepusht."

# Intelligente Abfrage, ob der Workflow auf GitHub sichtbar ist
echo "-> Warte, bis der Workflow auf GitHub sichtbar ist..."
WORKFLOW_FOUND=false
# 5 Versuche x 2s Pause = 10s max. Wartezeit
for i in {1..5}; do
  if gh workflow list --repo "$GITHUB_USER/$FUSION_REPO_NAME" 2>/dev/null | grep -q "$WORKFLOW_NAME"; then
    echo "‚úî Workflow gefunden."
    WORKFLOW_FOUND=true
    break
  fi
  if [ $i -lt 5 ]; then
    echo "   - Noch nicht gefunden, versuche es in 2 Sekunden erneut (Versuch $i/5)..."
    sleep 2
  fi
done

if ! $WORKFLOW_FOUND; then
  echo "‚ùå Fehler: Workflow wurde nach 10 Sekunden nicht auf GitHub gefunden. Breche ab."
  exit 1
fi

echo "-> Starte den ersten Lauf des Workflows..."
gh workflow run sync.yml --repo "$GITHUB_USER/$FUSION_REPO_NAME" || { echo "‚ùå Fehler beim Starten des Workflows."; exit 1; }

echo
echo "‚úÖ Alles erledigt! Dein Fusions-Repo '$FUSION_REPO_NAME' wird jetzt bef√ºllt."
echo "üëÄ Verfolge den Fortschritt hier: https://github.com/$GITHUB_USER/$FUSION_REPO_NAME/actions"