#!/bin/bash
# ==============================================================================
# MONOMONO - HAUPTSKRIPT (v10.0 - Konsolidiert & Final)
# ==============================================================================
# Dieses Skript ist komplett in sich geschlossen. Der Inhalt f√ºr den
# Trigger-Workflow ist direkt hier eingebettet.
# ==============================================================================

# --- Konfiguration & Befehlslogik ---
CONFIG_FILE="$HOME/.monomono_config"

# Verarbeite Befehle wie --help oder --reset und beende das Skript danach
case "$1" in
    --help|-h)
        echo "MonoMono Assistent - Ein Werkzeug zum Erstellen von Fusions-Repos."
        echo
        echo "Verwendung:"
        echo "  monomono           - Startet den interaktiven Assistenten."
        echo "  monomono --reset   - L√∂scht den gespeicherten GitHub-Benutzernamen."
        echo "  monomono --help    - Zeigt diese Hilfe an."
        exit 0
        ;;
    --reset)
        if [ -f "$CONFIG_FILE" ]; then
            rm "$CONFIG_FILE"
            echo "‚úî Gespeicherter Benutzername wurde zur√ºckgesetzt."
        else
            echo "‚Ñπ Es war kein Benutzername zum Zur√ºcksetzen gespeichert."
        fi
        exit 0
        ;;
esac

# Lade Sprach- und Hilfsdateien, falls vorhanden
# (Diese Logik ist f√ºr zuk√ºnftige Erweiterungen vorbereitet)

# --- HAUPTLOGIK ---

# 1. PR√úFUNG DER VORAUSSETZUNGEN
if ! command -v gh &>/dev/null || ! command -v fzf &>/dev/null || ! command -v jq &>/dev/null; then
    # --- SETUP-MODUS ---
    echo "üîé Checking system requirements..."
    echo "--------------------------------------------------------------------"
    echo "‚ö†Ô∏è  One or more required tools are not available."
    echo "   Starting the one-time installation wizard..."
    echo "--------------------------------------------------------------------"
    OS_TYPE="$(uname -s)"
    read -p "? Required tools (gh, fzf, jq) are missing. Install them now? (y/n) " choice
    if [[ ! "$choice" =~ ^[YyJj]$ ]]; then echo "‚ùå Aborted by user."; exit 1; fi

    case "$OS_TYPE" in
        Linux*)
            if command -v apt-get &>/dev/null; then
                echo "-> Updating package lists (apt-get update)..."
                sudo apt-get update
                if ! command -v gh &>/dev/null; then echo "-> Installing 'GitHub CLI' (gh)..."; sudo apt-get install -y gh; fi
                if ! command -v fzf &>/dev/null; then echo "-> Installing 'fzf'..."; sudo apt-get install -y fzf; fi
                if ! command -v jq &>/dev/null; then echo "-> Installing 'jq'..."; sudo apt-get install -y jq; fi
            elif command -v dnf &>/dev/null; then
                if ! command -v gh &>/dev/null; then sudo dnf install -y gh; fi
                if ! command -v fzf &>/dev/null; then sudo dnf install -y fzf; fi
                if ! command -v jq &>/dev/null; then sudo dnf install -y jq; fi
            else
                echo "‚ùå Error: Could not find a suitable Linux package manager (apt, dnf)." >&2; exit 1
            fi
            ;;
        Darwin*)
            if ! command -v brew &>/dev/null; then echo "‚ùå Error: Homebrew (brew) not found."; exit 1; fi
            if ! command -v gh &>/dev/null; then brew install gh; fi
            if ! command -v fzf &>/dev/null; then brew install fzf; fi
            if ! command -v jq &>/dev/null; then brew install jq; fi
            ;;
        *) echo "‚ùå Error: Unsupported operating system ($OS_TYPE)." >&2; exit 1;;
    esac
    echo
    echo "--------------------------------------------------------------------"
    echo "‚úÖ SETUP COMPLETE. Please close this terminal and open a new one."
    echo "--------------------------------------------------------------------"
    exit 0
fi

# --- ARBEITS-MODUS ---
echo "‚úî System ready. All tools found."

# 2. GITHUB-LOGIN & RECHTE-PR√úFUNG
NEEDS_REAUTH=false
if ! gh auth status &>/dev/null; then
    NEEDS_REAUTH=true
else
    TOKEN_STATUS=$(gh auth status -t 2>&1)
    if ! echo "$TOKEN_STATUS" | grep -q "repo" || ! echo "$TOKEN_STATUS" | grep -q "workflow"; then
        NEEDS_REAUTH=true
        echo "‚ö†Ô∏è  WARNUNG: Deinem aktuellen GitHub-Login fehlen die ben√∂tigten Rechte (repo, workflow)."
    fi
fi
if $NEEDS_REAUTH; then
    echo "--------------------------------------------------------------------"
    echo "‚ÑπÔ∏è  Ein Login mit erweiterten Rechten ('repo', 'workflow') ist n√∂tig."
    read -p "? Dr√ºcke ENTER, um den Anmelde-Prozess zu starten..."
    unset GITHUB_TOKEN
    gh auth login --scopes repo,workflow
fi
if ! gh auth status &>/dev/null; then echo "‚ùå Login fehlgeschlagen."; exit 1; fi
echo "‚úî Erfolgreich bei GitHub angemeldet."

# 3. BENUTZERNAME LADEN/SPEICHERN
if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
else
    read -p "? Please enter your GitHub username: " GITHUB_USER
    echo "GITHUB_USER=\"$GITHUB_USER\"" > "$CONFIG_FILE"
fi
echo "‚Ñπ Angemeldet als Benutzer: $GITHUB_USER"

# 4. AUTHENTIFIZIERUNG MIT PERSONAL ACCESS TOKEN (PAT)
echo "--------------------------------------------------------------------"
echo "üîë INFO: Ein pers√∂nlicher Zugriffstoken (PAT) wird ben√∂tigt."
read -s -p "üëâ Bitte f√ºge den kopierten Token hier ein und dr√ºcke ENTER: " PAT; echo

# Token-Validierung mit cURL...
HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token $PAT" https://api.github.com/user)
if [ "$HTTP_STATUS" -ne 200 ]; then
    echo "‚ùå FEHLER: Der Token ist ung√ºltig (HTTP-Status: $HTTP_STATUS)." >&2; exit 1
fi
VALIDATED_USER=$(curl -s -H "Authorization: token $PAT" https://api.github.com/user | jq -r '.login')
echo "‚úî Access Token ist g√ºltig f√ºr Benutzer '$VALIDATED_USER'."

# ==============================================================================
# ‚ú® HIER IST DER FIX ‚ú®
# Wir speichern den PAT jetzt in die Konfigurationsdatei.
# ==============================================================================
echo "MONOMONO_PAT='$PAT'" >> "$CONFIG_FILE"
export GH_TOKEN=$PAT

# 5. PROJEKT-SETUP
echo "-------------------------------------------"
echo "üöÄ Starte den Assistenten..."
echo "1/5: Lade Repositories via API..."
REPOS_LIST=$(curl -s -H "Authorization: token $PAT" "https://api.github.com/user/repos?type=owner&per_page=100" | jq -r '.[].full_name')
if [ -z "$REPOS_LIST" ]; then echo "‚ùå Keine Repositories gefunden."; exit 1; fi

echo -e "2/5: W√§hle die zu fusionierenden Repos:\n(Navigation: Pfeiltasten, Auswahl: TAB, Best√§tigen: ENTER)"
SELECTED_REPOS=$(echo "$REPOS_LIST" | fzf --multi --height 40% --border --prompt="Select> ")
if [ -z "$SELECTED_REPOS" ]; then echo "‚ùå Aborted: No repositories selected."; exit 1; fi
SUB_REPOS=$(echo "$SELECTED_REPOS" | tr '\n' ',' | sed 's/,$//')

while true; do
    read -p "? 3/5: Wie soll das neue Fusions-Repo hei√üen? (Keine Leerzeichen): " FUSION_REPO_NAME
    if [[ "$FUSION_REPO_NAME" =~ \  ]]; then
        echo "‚ùå Fehler: Der Name darf keine Leerzeichen enthalten."
    elif [ -z "$FUSION_REPO_NAME" ]; then
        echo "‚ùå Fehler: Der Name darf nicht leer sein. Bitte versuche es erneut."
    else
        break
    fi
done

VISIBILITY_FLAG="--public"
read -p "? 4/5: Soll das Repository 'privat' sein? (j/n) " IS_PRIVATE
if [[ "$IS_PRIVATE" =~ ^[YyJj]$ ]]; then
    VISIBILITY_FLAG="--private"
fi

# 6. UPDATE-OPTIONEN
echo "-------------------------------------------"
echo "‚öôÔ∏è 5/5: Konfiguriere die Update-Methoden..."
CRON_SCHEDULE=""
read -p "? M√∂chtest du einen automatischen, zeitgesteuerten Sync aktivieren? (j/n) " ACTIVATE_SCHEDULE
if [[ "$ACTIVATE_SCHEDULE" =~ ^[YyJj]$ ]]; then
    read -p "? In welchem Intervall (in Stunden) soll der Sync laufen? (1-24) " SCHEDULE_HOURS
    CRON_SCHEDULE="  schedule:\n    - cron: '0 */${SCHEDULE_HOURS:-24} * * *'"
fi

SETUP_WEBHOOKS=false
read -p "? Sollen Echtzeit-Updates √ºber Sub-Repo-Workflows eingerichtet werden? (j/n) " ACTIVATE_WEBHOOKS
if [[ "$ACTIVATE_WEBHOOKS" =~ ^[YyJj]$ ]]; then
    SETUP_WEBHOOKS=true
fi

# 7. REPO ERSTELLEN & WORKFLOW PUSHEN
echo "-> Erstelle Repo '$FUSION_REPO_NAME' und richte den Workflow ein..."
gh repo create "$GITHUB_USER/$FUSION_REPO_NAME" "$VISIBILITY_FLAG" --description "Automatic fusion repo by MonoMono" >/dev/null || { echo "‚ùå Error creating repo."; exit 1; }
echo -n "$PAT" | gh secret set ACCESS_TOKEN --repo "$GITHUB_USER/$FUSION_REPO_NAME" || { echo "‚ùå Fehler beim Setzen des Secrets."; exit 1; }
echo "‚úî Secret erfolgreich im Repository gespeichert."

WORKFLOW_NAME="Fusion-Repo Erstellen & Aktualisieren"
ON_TRIGGERS="on:\n  workflow_dispatch:"
if [ -n "$CRON_SCHEDULE" ]; then
    ON_TRIGGERS+="\n$CRON_SCHEDULE"
fi

read -r -d '' WORKFLOW_CONTENT << EOM
name: 'Fusion-Repo Erstellen & Aktualisieren'
on:
  workflow_dispatch:
  repository_dispatch:
    types: [monomono-sync-event]
jobs:
  sync-repos:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout fusion repo
        uses: actions/checkout@v4
        with:
          token: \${{ secrets.ACCESS_TOKEN }}

      - name: Clone sub-repos
        run: |
          git config --global url."https://x-access-token:\${{ secrets.ACCESS_TOKEN }}@github.com/".insteadOf "https://github.com/"
          
          REPOS_TO_SYNC=\${{ inputs.repos || '$SUB_REPOS' }}
          for repo in \$(echo "\$REPOS_TO_SYNC" | sed 's/,/ /g'); do
            folder_name=\$(basename \$repo)
            echo "-> Cloning \$repo into \$folder_name..."
            rm -rf "\$folder_name"
            git clone --depth 1 https://github.com/\$repo.git "\$folder_name" && rm -rf "\$folder_name/.git"
          done

      # ==============================================================================
      # ‚ú® HIER IST DER NEUE, INTELLIGENTE README-SCHRITT ‚ú®
      # ==============================================================================
      - name: Create intelligent README
        run: |
          # Installiere 'tree', um eine visuelle Struktur anzuzeigen
          sudo apt-get update && sudo apt-get install -y tree

          # Generiere die README-Datei
          echo "# ü§ñ MonoMono Fusions-Repo" > README.md
          echo "" >> README.md
          echo "Dieses Repository ist eine automatisch generierte und synchronisierte Zusammenf√ºhrung mehrerer einzelner Repositories, erstellt von [MonoMono](https://github.com/mannomannX/MonoMono)." >> README.md
          echo "Es dient als zentraler √úberblick und f√ºr √ºbergreifende Analysen." >> README.md
          echo "" >> README.md
          echo "---" >> README.md
          echo "" >> README.md
          echo "## üó∫Ô∏è Projekt-Map" >> README.md
          echo "" >> README.md
          echo "### üß© Projekt-Komponenten" >> README.md
          echo "Die folgenden Ordner sind die eigentlichen Projekt-Komponenten. Jede ist ein Klon eines eigenst√§ndigen Sub-Repos:" >> README.md
          for repo in \$(echo "\${{ inputs.repos || '$SUB_REPOS' }}" | sed 's/,/ /g'); do
            echo "- **[\$(basename \$repo)](./\$(basename \$repo))** (Original: [\$repo](https://github.com/\$repo))" >> README.md
          done
          echo "" >> README.md
          echo "### üõ†Ô∏è MonoMono-Infrastruktur" >> README.md
          echo "Die folgenden Dateien und Ordner sind Teil der MonoMono-Automatisierung und nicht Teil der Kernprojekte:" >> README.md
          echo "- **[.github/workflows/sync.yml](./.github/workflows/sync.yml)**: Der GitHub Actions Workflow, der dieses Repo aktuell h√§lt." >> README.md
          echo "" >> README.md
          echo "### üå≥ Visuelle Verzeichnisstruktur" >> README.md
          echo "\`\`\`" >> README.md
          tree -L 2 -I 'README.md' >> README.md
          echo "\`\`\`" >> README.md
          echo "" >> README.md
          echo "> Letzte Aktualisierung: \$(date)" >> README.md

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add README.md # Wir committen jetzt explizit nur die README
          if ! git diff-index --quiet HEAD; then
            # Pr√ºfen, ob schon ein Commit mit "Sync" existiert, um Doppel-Commits zu vermeiden
            if git log -1 --pretty=%B | grep -q "Fusion-Repo: Sync sub-repos"; then
                git commit --amend --no-edit
            else
                git commit -m "docs: Update project map"
            fi
            git push
          else
            echo "Keine √Ñnderungen an der README gefunden."
          fi
EOM
TEMP_DIR=$(mktemp -d)
cd "$TEMP_DIR" || exit 1
git clone "https://x-access-token:$PAT@github.com/$GITHUB_USER/$FUSION_REPO_NAME.git" . >/dev/null 2>&1 || { echo "‚ùå Error cloning repo."; rm -rf "$TEMP_DIR"; exit 1; }
mkdir -p .github/workflows
echo -e "$WORKFLOW_CONTENT" > .github/workflows/sync.yml
git config user.name "MonoMono Script"
git config user.email "bot@users.noreply.github.com"
git add .
git commit -m "CI: Add initial sync workflow"
git push --force origin main >/dev/null 2>&1 || { echo "‚ùå Error pushing workflow."; rm -rf "$TEMP_DIR"; exit 1; }
cd - >/dev/null
rm -rf "$TEMP_DIR"
echo "‚úî Workflow file successfully pushed to GitHub."

# 8. ECHTZEIT-SYNC EINRICHTEN (TRIGGER-WORKFLOWS)
if [[ "$SETUP_WEBHOOKS" = true ]]; then
    echo "-> Richte Echtzeit-Synchronisierung f√ºr die Sub-Repos ein..."

    # ==============================================================================
    # ‚ú® HIER IST DER FINALE FIX ‚ú®
    # Wir √ºbergeben den PAT-Secret korrekt an die GH_TOKEN-Umgebungsvariable.
    # ==============================================================================
    read -r -d '' TRIGGER_WORKFLOW_CONTENT << EOM
# MonoMono Trigger Workflow
name: MonoMono Sync Trigger
on:
  push:
    branches: [main, master]
jobs:
  dispatch:
    runs-on: ubuntu-latest
    steps:
      - name: Send dispatch to fusion repo
        env:
          FUSION_REPO: \${{ secrets.MONOMONO_FUSION_REPO }}
          GH_TOKEN: \${{ secrets.MONOMONO_PAT }}
        run: |
          if [ -z "\$FUSION_REPO" ]; then
            echo "Fehler: Secret MONOMONO_FUSION_REPO ist nicht gesetzt."
            exit 1
          fi
          
          echo "Sending dispatch to \$FUSION_REPO"
          gh api --method POST "repos/\$FUSION_REPO/dispatches" -f "event_type=monomono-sync-event"
EOM

    for repo in $(echo $SUB_REPOS | sed "s/,/ /g"); do
        echo "   - Konfiguriere Sub-Repo: $repo"
        
        FUSION_REPO_FULL_NAME="$GITHUB_USER/$FUSION_REPO_NAME"
        echo "     - Setze Secrets im Sub-Repo..."
        echo -n "$FUSION_REPO_FULL_NAME" | gh secret set MONOMONO_FUSION_REPO --repo "$repo"
        echo -n "$PAT" | gh secret set MONOMONO_PAT --repo "$repo"

        echo "     - Pushe Trigger-Workflow zum Sub-Repo..."
        TEMP_SUB_DIR=$(mktemp -d)
        git clone "https://x-access-token:$PAT@github.com/$repo.git" "$TEMP_SUB_DIR" >/dev/null 2>&1
        
        mkdir -p "$TEMP_SUB_DIR/.github/workflows"
        echo -e "$TRIGGER_WORKFLOW_CONTENT" > "$TEMP_SUB_DIR/.github/workflows/monomono-trigger.yml"
        
        cd "$TEMP_SUB_DIR" || exit
        git config user.name "MonoMono Script"
        git add .github/workflows/monomono-trigger.yml
        if ! git diff-index --quiet HEAD; then
            git commit -m "feat: Add MonoMono sync trigger"
            git push
        else
            echo "     - Trigger-Workflow ist bereits aktuell."
        fi
        cd - >/dev/null
        rm -rf "$TEMP_SUB_DIR"
    done
fi

# 9. WORKFLOW STARTEN
echo "-> Warte, bis der Workflow auf GitHub sichtbar ist..."
WORKFLOW_FOUND=false
for i in {1..5}; do
  if gh workflow list --repo "$GITHUB_USER/$FUSION_REPO_NAME" 2>/dev/null | grep -q "$WORKFLOW_NAME"; then
    echo "‚úî Workflow gefunden."; WORKFLOW_FOUND=true; break;
  fi
  if [ $i -lt 5 ]; then echo "   - Noch nicht gefunden, versuche es in 2 Sekunden erneut..."; sleep 2; fi
done
if ! $WORKFLOW_FOUND; then echo "‚ùå Error: Workflow not found after 10 seconds."; exit 1; fi
echo "-> Starte den ersten Lauf des Workflows..."
gh workflow run sync.yml --repo "$GITHUB_USER/$FUSION_REPO_NAME" || { echo "‚ùå Error starting the workflow."; exit 1; }

echo
echo "$TEXT_ALL_DONE"
echo "üëÄ Verfolge den Fortschritt hier: https://github.com/$GITHUB_USER/$FUSION_REPO_NAME/actions"