#!/bin/bash
# ==============================================================================
# MonoMono Connect-Skript v1.1 (final)
# ==============================================================================
# Verbindet ein bestehendes Repository mit dem MonoMono-System, indem es den
# Update-Workflow installiert und die n√∂tigen Verbindungen (Secrets)
# f√ºr die Synchronisierung einrichtet.
# ==============================================================================
CONFIG_FILE="$HOME/.monomono_config"

# Funktion zur PAT-Abfrage, falls nicht in der Config gefunden
ensure_pat() {
    if [ -f "$CONFIG_FILE" ]; then source "$CONFIG_FILE"; fi
    if [ -z "$MONOMONO_PAT" ]; then
        echo "--------------------------------------------------------------------"
        echo "üîë INFO: Ein pers√∂nlicher Zugriffstoken (PAT) wird f√ºr die Authentifizierung ben√∂tigt."
        echo "‚ÄºÔ∏è  AKTION ERFORDERLICH: √ñffne https://github.com/settings/tokens/new"
        echo "   Anleitung: W√§hle die Scopes 'repo' UND 'workflow' aus, generiere den Token und kopiere ihn."
        echo "--------------------------------------------------------------------"
        PAT_INPUT=""
        while [ -z "$PAT_INPUT" ]; do
            read -s -p "üëâ Bitte f√ºge den kopierten Token hier ein und dr√ºcke ENTER: " PAT_INPUT; echo
        done
        
        echo "-> √úberpr√ºfe den Access Token..."
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token $PAT_INPUT" https://api.github.com/user)
        if [ "$HTTP_STATUS" -ne 200 ]; then echo "‚ùå FEHLER: Der Token ist ung√ºltig (HTTP-Status: $HTTP_STATUS)." >&2; exit 1; fi
        
        echo "‚úî Access Token ist g√ºltig."
        # Speichere den neuen Token f√ºr die Zukunft
        echo "MONOMONO_PAT='$PAT_INPUT'" >> "$CONFIG_FILE"
        MONOMONO_PAT=$PAT_INPUT
    fi
    # Authentifiziere die aktuelle Sitzung mit dem Token
    export GH_TOKEN=$MONOMONO_PAT
    echo "‚úî Authentifizierung f√ºr diese Sitzung gesetzt."
}

# --- HAUPTLOGIK ---
echo "MonoMono Connect Assistent"
echo "---------------------------"
echo "Dieses Skript installiert den Update-Workflow in einem bestehenden Repository."
echo

ensure_pat
GITHUB_USER=$(curl -s -H "Authorization: token $MONOMONO_PAT" https://api.github.com/user | jq -r '.login')
echo "‚úî Authentifiziert als Benutzer: $GITHUB_USER"

read -p "? Welches bestehende Repo soll verbunden werden? (z.B. $GITHUB_USER/mein-repo): " FUSION_REPO
if [ -z "$FUSION_REPO" ]; then echo "‚ùå Fehler: Eingabe darf nicht leer sein."; exit 1; fi

echo "-> Lade verf√ºgbare Repositories f√ºr die Auswahl..."
REPOS_LIST=$(curl -s -H "Authorization: token $MONOMONO_PAT" "https://api.github.com/user/repos?type=owner&per_page=100" | jq -r '.[].full_name')
echo -e "? Welche Sub-Repos sollen damit verbunden werden?"
SELECTED_REPOS=$(echo "$REPOS_LIST" | fzf --multi --height 40% --border --prompt="Select> ")
if [ -z "$SELECTED_REPOS" ]; then echo "‚ùå Aborted: No repositories selected."; exit 1; fi
SUB_REPOS=$(echo "$SELECTED_REPOS" | tr '\n' ',' | sed 's/,$//')

# Ab hier ist die Logik identisch zum Hauptskript monomono:
# - Update-Optionen abfragen (Schedule)
# - Secret setzen
# - Workflow generieren (mit dem Inhalt der neuesten Version)
# - Workflow pushen
# - Workflow starten

echo "-------------------------------------------"
echo "‚öôÔ∏è Konfiguriere die Update-Methoden f√ºr '$FUSION_REPO'..."
CRON_SCHEDULE=""
read -p "? M√∂chtest du einen automatischen, zeitgesteuerten Sync aktivieren? (j/n) " ACTIVATE_SCHEDULE
if [[ "$ACTIVATE_SCHEDULE" =~ ^[YyJj]$ ]]; then
    read -p "? In welchem Intervall (in Stunden) soll der Sync laufen? (1-24) " SCHEDULE_HOURS
    CRON_SCHEDULE="  schedule:\n    - cron: '0 */${SCHEDULE_HOURS:-24} * * *'"
fi

SETUP_WEBHOOKS=false
read -p "? Sollen Echtzeit-Updates √ºber Sub-Repo-Workflows eingerichtet werden? (y/n) " ACTIVATE_WEBHOOKS
if [[ "$ACTIVATE_WEBHOOKS" =~ ^[YyJj]$ ]]; then
    SETUP_WEBHOOKS=true
fi


echo "-> Speichere den Token sicher als 'ACCESS_TOKEN' Secret im Repo..."
echo -n "$MONOMONO_PAT" | gh secret set ACCESS_TOKEN --repo "$FUSION_REPO" || { echo "‚ùå Fehler beim Setzen des Secrets."; exit 1; }
echo "‚úî Secret erfolgreich im Repository '$FUSION_REPO' gespeichert."

WORKFLOW_NAME="Fusion-Repo Erstellen & Aktualisieren"
ON_TRIGGERS="on:\n  workflow_dispatch:"
if [ -n "$CRON_SCHEDULE" ]; then
    ON_TRIGGERS+="\n$CRON_SCHEDULE"
fi
if $SETUP_WEBHOOKS; then
    ON_TRIGGERS+="\n  repository_dispatch:\n    types: [monomono-sync-event]"
fi

read -r -d '' WORKFLOW_CONTENT << EOM
name: '$WORKFLOW_NAME'
$ON_TRIGGERS
jobs:
  sync-repos:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout fusion repo
        uses: actions/checkout@v4
        with:
          token: \${{ secrets.ACCESS_TOKEN }}
      - name: Clone sub-repos
        run: |
          git config --global url."https://x-access-token:\${{ secrets.ACCESS_TOKEN }}@github.com/".insteadOf "https://github.com/"
          REPOS_TO_SYNC=\${{ inputs.repos || '$SUB_REPOS' }}
          for repo in \$(echo "\$REPOS_TO_SYNC" | sed 's/,/ /g'); do
            folder_name=\$(basename \$repo)
            echo "-> Cloning \$repo into \$folder_name..."
            rm -rf "\$folder_name"
            git clone --depth 1 https://github.com/\$repo.git "\$folder_name" && rm -rf "\$folder_name/.git"
          done
      - name: Create intelligent README
        run: |
          sudo apt-get update && sudo apt-get install -y tree
          echo "# ü§ñ MonoMono Fusions-Repo" > README.md
          echo "" >> README.md
          echo "Dieses Repository ist eine automatisch generierte und synchronisierte Zusammenf√ºhrung mehrerer einzelner Repositories, erstellt von [MonoMono](https://github.com/mannomannX/MonoMono)." >> README.md
          echo "Es dient als zentraler √úberblick und f√ºr √ºbergreifende Analysen." >> README.md
          echo "" >> README.md
          echo "---" >> README.md
          echo "" >> README.md
          echo "## üó∫Ô∏è Projekt-Map" >> README.md
          echo "" >> README.md
          echo "### üß© Projekt-Komponenten" >> README.md
          echo "Die folgenden Ordner sind die eigentlichen Projekt-Komponenten. Jede ist ein Klon eines eigenst√§ndigen Sub-Repos:" >> README.md
          for repo in \$(echo "\${{ inputs.repos || '$SUB_REPOS' }}" | sed 's/,/ /g'); do
            echo "- **[\$(basename \$repo)](./\$(basename \$repo))** (Original: [\$repo](https://github.com/\$repo))" >> README.md
          done
          echo "" >> README.md
          echo "### üõ†Ô∏è MonoMono-Infrastruktur" >> README.md
          echo "Die folgenden Dateien und Ordner sind Teil der MonoMono-Automatisierung und nicht Teil der Kernprojekte:" >> README.md
          echo "- **[.github/workflows/sync.yml](./.github/workflows/sync.yml)**: Der GitHub Actions Workflow, der dieses Repo aktuell h√§lt." >> README.md
          echo "" >> README.md
          echo "### üå≥ Visuelle Verzeichnisstruktur" >> README.md
          echo \`\`\` >> README.md
          tree -L 2 -I 'README.md' >> README.md
          echo \`\`\` >> README.md
          echo "" >> README.md
          echo "> Letzte Aktualisierung: \$(date)" >> README.md
      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          if ! git diff-index --quiet HEAD; then
            git commit -m "feat(workflow): Connect to MonoMono"
            git push
          else
            echo "No changes to workflow found."
          fi
EOM

echo "-> Richte tempor√§ren lokalen Klon ein, um den Workflow zu pushen..."
TEMP_DIR=$(mktemp -d)
cd "$TEMP_DIR" || exit 1
git clone "https://x-access-token:$MONOMONO_PAT@github.com/$FUSION_REPO.git" . >/dev/null 2>&1 || { echo "‚ùå Fehler beim Klonen des Ziel-Repos."; rm -rf "$TEMP_DIR"; exit 1; }
mkdir -p .github/workflows
echo -e "$WORKFLOW_CONTENT" > .github/workflows/sync.yml
git config user.name "MonoMono Connect"
git config user.email "bot@users.noreply.github.com"
git add .
git commit -m "feat(workflow): Connect to MonoMono sync system"
git push || { echo "‚ùå Fehler beim Pushen des Workflows."; rm -rf "$TEMP_DIR"; exit 1; }
cd - >/dev/null
rm -rf "$TEMP_DIR"
echo "‚úî Workflow-Datei erfolgreich nach '$FUSION_REPO' gepusht."


if [[ "$SETUP_WEBHOOKS" = true ]]; then
    echo "-> Richte Echtzeit-Synchronisierung f√ºr die Sub-Repos ein..."

    # ==============================================================================
    # ‚ú® HIER IST DER FINALE FIX ‚ú®
    # Wir √ºbergeben den PAT-Secret korrekt an die GH_TOKEN-Umgebungsvariable.
    # ==============================================================================
    read -r -d '' TRIGGER_WORKFLOW_CONTENT << EOM
# MonoMono Trigger Workflow
name: MonoMono Sync Trigger
on:
  push:
    branches: [main, master]
jobs:
  dispatch:
    runs-on: ubuntu-latest
    steps:
      - name: Send dispatch to fusion repo
        env:
          FUSION_REPO: \${{ secrets.MONOMONO_FUSION_REPO }}
          GH_TOKEN: \${{ secrets.MONOMONO_PAT }}
        run: |
          if [ -z "\$FUSION_REPO" ]; then
            echo "Fehler: Secret MONOMONO_FUSION_REPO ist nicht gesetzt."
            exit 1
          fi
          
          echo "Sending dispatch to \$FUSION_REPO"
          gh api --method POST "repos/\$FUSION_REPO/dispatches" -f "event_type=monomono-sync-event"
EOM

    for repo in $(echo $SUB_REPOS | sed "s/,/ /g"); do
        echo "   - Konfiguriere Sub-Repo: $repo"
        
        FUSION_REPO_FULL_NAME="$GITHUB_USER/$FUSION_REPO_NAME"
        echo "     - Setze Secrets im Sub-Repo..."
        echo -n "$FUSION_REPO_FULL_NAME" | gh secret set MONOMONO_FUSION_REPO --repo "$repo"
        echo -n "$PAT" | gh secret set MONOMONO_PAT --repo "$repo"

        echo "     - Pushe Trigger-Workflow zum Sub-Repo..."
        TEMP_SUB_DIR=$(mktemp -d)
        git clone "https://x-access-token:$PAT@github.com/$repo.git" "$TEMP_SUB_DIR" >/dev/null 2>&1
        
        mkdir -p "$TEMP_SUB_DIR/.github/workflows"
        echo -e "$TRIGGER_WORKFLOW_CONTENT" > "$TEMP_SUB_DIR/.github/workflows/monomono-trigger.yml"
        
        cd "$TEMP_SUB_DIR" || exit
        git config user.name "MonoMono Script"
        git add .github/workflows/monomono-trigger.yml
        if ! git diff-index --quiet HEAD; then
            git commit -m "feat: Add MonoMono sync trigger"
            git push
        else
            echo "     - Trigger-Workflow ist bereits aktuell."
        fi
        cd - >/dev/null
        rm -rf "$TEMP_SUB_DIR"
    done
fi

# 9. WORKFLOW STARTEN
echo "-> Warte, bis der Workflow auf GitHub sichtbar ist..."
WORKFLOW_FOUND=false
for i in {1..5}; do
  if gh workflow list --repo "$GITHUB_USER/$FUSION_REPO_NAME" 2>/dev/null | grep -q "$WORKFLOW_NAME"; then
    echo "‚úî Workflow gefunden."; WORKFLOW_FOUND=true; break;
  fi
  if [ $i -lt 5 ]; then echo "   - Noch nicht gefunden, versuche es in 2 Sekunden erneut..."; sleep 2; fi
done
if ! $WORKFLOW_FOUND; then echo "‚ùå Error: Workflow not found after 10 seconds."; exit 1; fi
echo "-> Starte den ersten Lauf des Workflows..."
gh workflow run sync.yml --repo "$GITHUB_USER/$FUSION_REPO_NAME" || { echo "‚ùå Error starting the workflow."; exit 1; }

echo
echo "‚úÖ Verbindung f√ºr '$FUSION_REPO' erfolgreich hergestellt."
echo "   F√ºhre 'monomono-update $FUSION_REPO' aus, um die erste Synchronisierung zu starten, sofern nicht automatisch."