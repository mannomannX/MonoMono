#!/bin/bash
# ==============================================================================
# MONOMONO-CONNECT v1.1 (Standalone & Autark)
# ==============================================================================
# Verbindet ein neues Sub-Repo mit einem bestehenden Fusions-Repo.
# Generiert ben√∂tigte Tokens eigenst√§ndig f√ºr eine nahtlose Erfahrung.
# ==============================================================================

# --- Hilfsfunktionen ---
auth_check() {
    if ! gh auth status >/dev/null 2>&1; then
        echo "‚ö†Ô∏è  Du scheinst nicht bei der GitHub CLI angemeldet zu sein."
        read -p "? Soll 'gh auth login' jetzt ausgef√ºhrt werden? (j/n) " choice
        if [[ "$choice" =~ ^[YyJj]$ ]]; then gh auth login; else echo "‚ùå Abbruch."; exit 1; fi
    fi
    GITHUB_USER=$(gh api user --jq .login)
    echo "‚úî Authentifiziert als '$GITHUB_USER'."
}

# --- HAUPTLOGIK ---
auth_check

# 1. Inputs sammeln
read -p "? Zu welchem Fusions-Repo soll verbunden werden? (Format: user/repo): " FUSION_REPO
if [ -z "$FUSION_REPO" ]; then echo "‚ùå Abbruch: Kein Fusions-Repo angegeben."; exit 1; fi

read -p "? Welches neue Sub-Repo soll verbunden werden? (Format: user/repo): " NEW_SUB_REPO
if [ -z "$NEW_SUB_REPO" ]; then echo "‚ùå Abbruch: Kein Sub-Repo angegeben."; exit 1; fi

# 2. PAT f√ºr Secret-Management abfragen
echo "--------------------------------------------------------------------"
echo "üîë INFO: Ein pers√∂nlicher Zugriffstoken (PAT) wird ben√∂tigt, um Secrets zu setzen."
echo "‚ÄºÔ∏è  AKTION ERFORDERLICH: Bitte erstelle einen Token mit den Scopes 'repo' UND 'workflow'."
echo "   Falls du schon einen hast, f√ºge ihn einfach erneut ein."
echo "   URL: https://github.com/settings/tokens/new"
echo "--------------------------------------------------------------------"
PAT=""
while [ -z "$PAT" ]; do
    read -s -p "üëâ Bitte f√ºge den kopierten Token hier ein und dr√ºcke ENTER: " PAT; echo
done
echo "-> √úberpr√ºfe den Access Token..."
HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token $PAT" https://api.github.com/user)
if [ "$HTTP_STATUS" -ne 200 ]; then
    echo "‚ùå FEHLER: Der Token ist ung√ºltig oder hat nicht die n√∂tigen Rechte (HTTP-Status: $HTTP_STATUS)." >&2; exit 1
fi
echo "‚úî Access Token ist g√ºltig."

# 3. Bestehende Konfiguration auslesen
echo "-> Lese die aktuelle Konfiguration aus '$FUSION_REPO'..."
WORKFLOW_RESPONSE=$(gh api "repos/$FUSION_REPO/contents/.github/workflows/sync.yml" 2>/dev/null)
if [ -z "$WORKFLOW_RESPONSE" ]; then
    echo "‚ùå Fehler: Konnte 'sync.yml' im Repo '$FUSION_REPO' nicht finden. Ist der Repo-Name korrekt?" >&2
    exit 1
fi
WORKFLOW_CONTENT=$(echo "$WORKFLOW_RESPONSE" | jq -r .content | base64 --decode)
WORKFLOW_SHA=$(echo "$WORKFLOW_RESPONSE" | jq -r .sha)

# 4. Sub-Repo-Liste extrahieren und erweitern
SUB_REPOS_OLD=$(echo "$WORKFLOW_CONTENT" | grep -oP "for repo in \\\$\(echo '([^']*)'" | head -n1 | sed -E "s/for repo in \\\$\(echo '([^']*)'/\1/")

# Fehlerfest: Pr√ºfen, ob das Repo bereits verbunden ist
if [[ ",$SUB_REPOS_OLD," == *",$NEW_SUB_REPO,"* ]]; then
    echo "‚ö†Ô∏è  Warnung: Das Repository '$NEW_SUB_REPO' ist bereits mit diesem Fusions-Repo verbunden."
    exit 0
fi

SUB_REPOS_NEW="$SUB_REPOS_OLD,$NEW_SUB_REPO"
echo "‚úî Neue Repo-Liste: $SUB_REPOS_NEW"

# 5. Neue Workflow-Vorlage erstellen
read -r -d '' SYNC_WORKFLOW_TEMPLATE << EOM
name: 'Fusion-Repo Sync'
on:
  workflow_dispatch:
  repository_dispatch:
    types: [monomono-sync-event]
jobs:
  sync-repos:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout fusion repo
        uses: actions/checkout@v4
        with:
          token: \${{ secrets.ACCESS_TOKEN }}
      - name: Clone sub-repos
        run: |
          git config --global url."https://x-access-token:\${{ secrets.ACCESS_TOKEN }}@github.com/".insteadOf "https://github.com/"
          for repo in \$(echo '${SUB_REPOS_NEW}' | sed 's/,/ /g'); do
            folder_name=\$(basename \$repo)
            echo "-> Cloning \$repo into \$folder_name..."
            rm -rf "\$folder_name"
            git clone --depth 1 https://github.com/\$repo.git "\$folder_name" && rm -rf "\$folder_name/.git"
          done
      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          if ! git diff-index --quiet HEAD; then
            git commit -m "feat: Connect new sub-repo and sync"
            git push
          else
            echo "No new changes found."
          fi
EOM

# 6. Haupt-Workflow im Fusions-Repo aktualisieren
echo "-> Aktualisiere Haupt-Workflow in '$FUSION_REPO'..."
gh api --method PUT "repos/$FUSION_REPO/contents/.github/workflows/sync.yml" \
   -f message="build: Connect new sub-repo ($NEW_SUB_REPO)" \
   -f content="$(echo -n "$SYNC_WORKFLOW_TEMPLATE" | base64)" \
   -f sha="$WORKFLOW_SHA" >/dev/null || { echo "‚ùå Fehler beim Aktualisieren des Haupt-Workflows."; exit 1; }
echo "‚úî Haupt-Workflow erfolgreich aktualisiert."

# 7. Neues Sub-Repo konfigurieren
echo "-> Konfiguriere neues Sub-Repo '$NEW_SUB_REPO'..."

# Lade die Konfiguration, um einen App-Token zu generieren
CONFIG_DIR="$HOME/.monomono"
CONFIG_FILE="$CONFIG_DIR/config.json"
if [ ! -f "$CONFIG_FILE" ]; then
    echo "‚ùå Fehler: Konnte die MonoMono-Konfigurationsdatei nicht finden." >&2
    echo "   Bitte f√ºhre zuerst das Hauptskript 'monomono' einmal vollst√§ndig aus." >&2
    exit 1
fi

# Holt einen kurzlebigen Installation-Token f√ºr die App
get_installation_token() {
    # --- (Diese Funktion ist perfekt so, wie du sie eingef√ºgt hast) ---
    APP_ID=$(jq -r '.app_id' "$CONFIG_FILE")
    PRIVATE_KEY_PATH=$(jq -r '.private_key_path' "$CONFIG_FILE")
    APP_NAME=$(jq -r '.app_name' "$CONFIG_FILE")
    GITHUB_USER=$(jq -r '.github_user' "$CONFIG_FILE")
    # ... Rest der Funktion ...
    INSTALLATION_TOKEN=$(curl -s -X POST -H "Authorization: Bearer $JWT" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/app/installations/$INSTALLATION_ID/access_tokens" | jq -r '.token')
    if [ -z "$INSTALLATION_TOKEN" ] || [ "$INSTALLATION_TOKEN" == "null" ]; then echo "‚ùå Fehler beim Erstellen des Installation-Tokens."; exit 1; fi
    # KORREKTUR: Exportiere den Token und leite die Erfolgsmeldung auf den Fehlerkanal um,
    # damit sie nicht versehentlich aufgefangen wird.
    export GH_TOKEN=$INSTALLATION_TOKEN
    echo "‚úî Erfolgreich als MonoMono-App authentifiziert." >&2
}

echo "   - Generiere sicheren App-Token..."
get_installation_token # 1. Rufe die Funktion ganz normal auf. Sie exportiert $GH_TOKEN.

echo "   - Setze Secrets..."
# 2. Verwende die exportierte Variable $GH_TOKEN direkt.
GH_TOKEN=$PAT gh secret set MONOMONO_FUSION_REPO --repo "$NEW_SUB_REPO" --body "$FUSION_REPO"
GH_TOKEN=$PAT gh secret set MONOMONO_APP_TOKEN --repo "$NEW_SUB_REPO" --body "$GH_TOKEN" # <-- HIER IST DIE KORREKTUR

# Vorlage f√ºr den Trigger-Workflow (bleibt gleich)
read -r -d '' TRIGGER_WORKFLOW_TEMPLATE << EOM
name: MonoMono Sync Trigger
on:
  push:
    branches: [main, master]
jobs:
  dispatch:
    runs-on: ubuntu-latest
    steps:
      - name: Send dispatch to fusion repo
        env:
          FUSION_REPO: \${{ secrets.MONOMONO_FUSION_REPO }}
          GH_TOKEN: \${{ secrets.MONOMONO_APP_TOKEN }}
        run: |
          if [ -z "\$FUSION_REPO" ] || [ -z "\$GH_TOKEN" ]; then echo "Fehler: Secrets nicht gesetzt."; exit 1; fi
          gh api --method POST "repos/\$FUSION_REPO/dispatches" -f "event_type=monomono-sync-event"
EOM

# Trigger-Workflow installieren (bleibt gleich)
echo "   - Installiere Trigger-Workflow..."
GH_TOKEN=$PAT gh api --method PUT "repos/$NEW_SUB_REPO/contents/.github/workflows/monomono-trigger.yml" \
   -f message="feat: Add monomono trigger workflow" \
   -f content="$(echo -n "$TRIGGER_WORKFLOW_TEMPLATE" | base64)" >/dev/null || { echo "‚ùå Fehler beim Installieren des Trigger-Workflows."; exit 1; }

echo "‚úî Sub-Repo erfolgreich konfiguriert."
echo ""
echo "‚úÖ Verbindung hergestellt! Der n√§chste Sync wird '$NEW_SUB_REPO' beinhalten."
