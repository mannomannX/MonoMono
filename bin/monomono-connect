#!/bin/bash
# ==============================================================================
# MONOMONO-CONNECT (v1.0)
# ==============================================================================
# Verbindet ein bestehendes Repository mit dem MonoMono-System, indem es den
# Update-Workflow installiert und die n√∂tigen Verbindungen (Secrets, Webhooks)
# f√ºr die Synchronisierung einrichtet.
# ==============================================================================

# Hilfsfunktion, um eine URL im Standardbrowser zu √∂ffnen.
open_url() {
  local url=$1
  case "$(uname -s)" in
    Linux*)   xdg-open "$url" >/dev/null 2>&1 ;;
    Darwin*)  open "$url" ;;
    CYGWIN*|MINGW*|MSYS*) # Git Bash on Windows
              start "" "$url" ;;
    *)        echo "Konnte den Browser nicht automatisch √∂ffnen."
              echo "Bitte √∂ffne diese URL manuell: $url" ;;
  esac
}

# --- HAUPTLOGIK ---

echo "MonoMono Connect Assistent"
echo "---------------------------"
echo "Dieses Skript installiert den Update-Workflow in einem bestehenden Repository."
echo

# 1. SETUP-PR√úFUNG (vereinfacht, da die Tools f√ºr den Hauptbefehl schon da sein sollten)
if ! command -v gh &>/dev/null || ! command -v fzf &>/dev/null; then
    echo "‚ùå Fehler: Die Kern-Abh√§ngigkeiten 'gh' und 'fzf' sind nicht installiert."
    echo "   Bitte f√ºhre zuerst das Hauptskript 'monomono' aus, um das Setup durchzuf√ºhren."
    exit 1
fi

# 2. GITHUB-LOGIN-PR√úFUNG
if ! gh auth status &>/dev/null; then
  echo "üîë Du bist nicht bei der GitHub CLI angemeldet. Bitte melde dich zuerst an mit: gh auth login"
  exit 1
fi
echo "‚úî Erfolgreich bei GitHub angemeldet."

# 3. BENUTZER-EINGABEN
GITHUB_USER=$(gh auth status -h github.com --jq .user)
echo "‚ÑπÔ∏è Angemeldet als Benutzer: $GITHUB_USER"

read -p "? Welches bestehende Repo soll verbunden werden? (user/repo): " FUSION_REPO
if [ -z "$FUSION_REPO" ]; then echo "‚ùå Fehler: Eingabe darf nicht leer sein."; exit 1; fi

echo "-> Lade verf√ºgbare Repositories f√ºr die Auswahl..."
REPOS_LIST=$(gh repo list "$GITHUB_USER" --limit 1000 --json "nameWithOwner" --jq '.[].nameWithOwner')
if [ -z "$REPOS_LIST" ]; then echo "‚ùå Keine Repositories f√ºr '$GITHUB_USER' gefunden."; exit 1; fi

echo -e "? Welche Sub-Repos sollen damit verbunden werden?\n(Navigation: Pfeiltasten, Auswahl: TAB, Best√§tigen: ENTER)"
SELECTED_REPOS=$(echo "$REPOS_LIST" | fzf --multi --height 40% --border --prompt="Auswahl> ")
if [ -z "$SELECTED_REPOS" ]; then echo "‚ùå Abbruch: Keine Repositories ausgew√§hlt."; exit 1; fi
SUB_REPOS=$(echo "$SELECTED_REPOS" | tr '\n' ',' | sed 's/,$//')


# 4. DELUXE AUTHENTIFIZIERUNGS-WORKFLOW
echo
echo "--------------------------------------------------------------------"
echo "üîë INFO: ZUGRIFFS-TOKEN BEN√ñTIGT"
read -p "? Dr√ºcke ENTER, um die Token-Erstellung im Browser zu √∂ffnen..."

open_url "https://github.com/settings/tokens/new"
echo
echo "‚ÄºÔ∏è ANLEITUNG IM BROWSER:"
echo "   1. Note: Gib dem Token einen Namen (z.B. 'MonoMono_Connect_Token')."
echo "   2. Scopes: W√§hle den Haken bei 'repo'."
echo "   3. Klicke ganz unten auf 'Generate token' und kopiere den Token."
echo "--------------------------------------------------------------------"

PAT=""
while [ -z "$PAT" ]; do
    read -s -p "üëâ Bitte f√ºge den kopierten Token hier ein und dr√ºcke ENTER: " PAT
    echo
done
echo "-> Speichere den Token sicher als 'ACCESS_TOKEN' Secret im Repo..."
echo -n "$PAT" | gh secret set ACCESS_TOKEN --repo "$FUSION_REPO" || { echo "‚ùå Fehler beim Setzen des Secrets."; exit 1; }
echo "‚úî Secret erfolgreich im Repository '$FUSION_REPO' gespeichert."


# 5. WORKFLOW ERSTELLEN UND PUSHEN
WORKFLOW_NAME="Fusion-Repo Erstellen & Aktualisieren"
read -r -d '' WORKFLOW_CONTENT << EOM
name: '$WORKFLOW_NAME'
on:
  workflow_dispatch:
jobs:
  sync-repos:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Fusions-Repo auschecken
        uses: actions/checkout@v4
      - name: Sub-Repos klonen
        run: |
          REPOS_TO_SYNC='$SUB_REPOS'
          for repo in \$(echo "\$REPOS_TO_SYNC" | sed 's/,/ /g'); do
            folder_name=\$(basename \$repo)
            echo "-> Klone \$repo in den Ordner \$folder_name..."
            git clone --depth 1 https://\${{ secrets.ACCESS_TOKEN }}@github.com/\$repo.git \$folder_name && rm -rf \$folder_name/.git
          done
      - name: README erstellen
        run: |
          REPOS_TO_SYNC='$SUB_REPOS'
          echo "# Fusion-Repo" > README.md
          echo "" >> README.md
          echo "Dieses Repository ist ein automatischer Zusammenschluss der folgenden Projekte:" >> README.md
          for repo in \$(echo "\$REPOS_TO_SYNC" | sed 's/,/ /g'); do
            echo "- [\$repo](https://github.com/\$repo)" >> README.md
          done
          echo "" >> README.md
          echo "Letzte Aktualisierung: \$(date)" >> README.md
      - name: √Ñnderungen committen & pushen
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          if ! git diff-index --quiet HEAD; then
            git commit -m "Fusion-Repo: Sub-Repos synchronisiert"
            git pull --rebase
            git push
          else
            echo "Keine neuen √Ñnderungen in den Sub-Repos gefunden."
          fi
EOM

echo "-> Richte tempor√§ren lokalen Klon ein, um den Workflow zu pushen..."
TEMP_DIR=$(mktemp -d)
cd "$TEMP_DIR" || exit 1
gh repo clone "$FUSION_REPO" . >/dev/null 2>&1 || { echo "‚ùå Fehler beim Klonen des Ziel-Repos."; rm -rf "$TEMP_DIR"; exit 1; }
mkdir -p .github/workflows
echo "$WORKFLOW_CONTENT" > .github/workflows/sync.yml
git config user.name "MonoMono Connect"
git config user.email "bot@users.noreply.github.com"
git add .
git commit -m "CI: Add MonoMono sync workflow"
git push || { echo "‚ùå Fehler beim Pushen des Workflows."; rm -rf "$TEMP_DIR"; exit 1; }
cd - >/dev/null
rm -rf "$TEMP_DIR"
echo "‚úî Workflow-Datei erfolgreich nach '$FUSION_REPO' gepusht."


# 6. WEBHOOKS EINRICHTEN (OPTIONAL)
echo
read -p "? Sollen Webhooks f√ºr Echtzeit-Updates eingerichtet werden? (j/n) " ACTIVATE_WEBHOOKS
if [[ "$ACTIVATE_WEBHOOKS" == "j" || "$ACTIVATE_WEBHOOKS" == "J" ]]; then
    echo "-> Richte Webhooks f√ºr die ausgew√§hlten Sub-Repos ein..."
    DISPATCH_URL="https://api.github.com/repos/$FUSION_REPO/dispatches"

    # F√ºge den Trigger zum Workflow hinzu (dies ist konzeptionell, da die Datei schon gepusht ist - f√ºr zuk√ºnftige Versionen)
    # Hier f√ºgen wir nur die Webhooks hinzu. Der Trigger muss im YAML sein.
    # F√ºr v1 nehmen wir an, der `repository_dispatch` muss manuell hinzugef√ºgt werden,
    # oder der Benutzer verl√§sst sich auf den manuellen Trigger.
    
    for repo in $(echo $SUB_REPOS | sed "s/,/ /g"); do
        echo "   - F√ºr Repo: $repo"
        gh api --method POST "repos/$repo/hooks" \
           -f "name=web" \
           -f "active=true" \
           -f "events[]=push" \
           -f "config[url]=$DISPATCH_URL" \
           -f "config[content_type]=json" \
           -f "config[insecure_ssl]=0" \
           --silent || echo "     ‚ùå Fehler beim Einrichten des Webhooks f√ºr $repo."
    done
    echo "‚úî Webhooks eingerichtet."
fi

echo
echo "‚úÖ Verbindung f√ºr '$FUSION_REPO' erfolgreich hergestellt."
echo "   Du kannst den Workflow jetzt manuell √ºber die 'Actions'-Seite des Repos starten."